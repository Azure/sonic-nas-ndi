/*
Package ocbinds is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- acl/yang/openconfig-packet-match.yang
	- acl/yang/openconfig-packet-match-types.yang
	- acl/yang/openconfig-inet-types.yang
	- acl/yang/openconfig-types.yang
	- acl/yang/openconfig-yang-types.yang
	- acl/yang/openconfig-extensions.yang
	- acl/yang/openconfig-acl.yang
	- acl/yang/openconfig-interfaces.yang
Imported modules were sourced from:
	- acl/yang/...
*/
package ocbinds

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Acl	*OpenconfigAcl_Acl	`path:"acl" module:"openconfig-acl"`
	Interfaces	*OpenconfigInterfaces_Interfaces	`path:"interfaces" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl represents the /openconfig-acl/acl YANG schema element.
type OpenconfigAcl_Acl struct {
	AclSets	*OpenconfigAcl_Acl_AclSets	`path:"acl-sets" module:"openconfig-acl"`
	Config	*OpenconfigAcl_Acl_Config	`path:"config" module:"openconfig-acl"`
	Interfaces	*OpenconfigAcl_Acl_Interfaces	`path:"interfaces" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets represents the /openconfig-acl/acl/acl-sets YANG schema element.
type OpenconfigAcl_Acl_AclSets struct {
	AclSet	map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet	`path:"acl-set" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_AclSets_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl/acl-sets.
type OpenconfigAcl_Acl_AclSets_AclSet_Key struct {
	Name	string	`path:"name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// NewAclSet creates a new entry in the AclSet list of the
// OpenconfigAcl_Acl_AclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_AclSets) NewAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_AclSets_AclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet)
	}

	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &OpenconfigAcl_Acl_AclSets_AclSet{
		Name: &Name,
		Type: Type,
	}

	return t.AclSet[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet struct {
	AclEntries	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries	`path:"acl-entries" module:"openconfig-acl"`
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_Config	`path:"config" module:"openconfig-acl"`
	Name	*string	`path:"name" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_State	`path:"state" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_AclSets_AclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}


	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries struct {
	AclEntry	map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry	`path:"acl-entry" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry struct {
	Actions	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions	`path:"actions" module:"openconfig-acl"`
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config	`path:"config" module:"openconfig-acl"`
	InputInterface	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface	`path:"input-interface" module:"openconfig-acl"`
	Ipv4	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4	`path:"ipv4" module:"openconfig-acl"`
	Ipv6	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6	`path:"ipv6" module:"openconfig-acl"`
	L2	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2	`path:"l2" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State	`path:"state" module:"openconfig-acl"`
	Transport	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport	`path:"transport" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config struct {
	ForwardingAction	E_OpenconfigAcl_FORWARDING_ACTION	`path:"forwarding-action" module:"openconfig-acl"`
	LogAction	E_OpenconfigAcl_LOG_ACTION	`path:"log-action" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State struct {
	ForwardingAction	E_OpenconfigAcl_FORWARDING_ACTION	`path:"forwarding-action" module:"openconfig-acl"`
	LogAction	E_OpenconfigAcl_LOG_ACTION	`path:"log-action" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config struct {
	Description	*string	`path:"description" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config	`path:"config" module:"openconfig-acl"`
	InterfaceRef	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config struct {
	Interface	*string	`path:"interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State struct {
	Interface	*string	`path:"interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State struct {
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-acl"`
	Dscp	*uint8	`path:"dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"hop-limit" module:"openconfig-acl"`
	Protocol	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union	`path:"protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol
// is to be set to a uint8 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_Uint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_Uint8) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-acl"`
	Dscp	*uint8	`path:"dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"hop-limit" module:"openconfig-acl"`
	Protocol	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union	`path:"protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol
// is to be set to a uint8 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_Uint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_Uint8) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-acl"`
	DestinationFlowLabel	*uint32	`path:"destination-flow-label" module:"openconfig-acl"`
	Dscp	*uint8	`path:"dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"hop-limit" module:"openconfig-acl"`
	Protocol	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union	`path:"protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-acl"`
	SourceFlowLabel	*uint32	`path:"source-flow-label" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol
// is to be set to a uint8 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_Uint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_Uint8) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State struct {
	DestinationAddress	*string	`path:"destination-address" module:"openconfig-acl"`
	DestinationFlowLabel	*uint32	`path:"destination-flow-label" module:"openconfig-acl"`
	Dscp	*uint8	`path:"dscp" module:"openconfig-acl"`
	HopLimit	*uint8	`path:"hop-limit" module:"openconfig-acl"`
	Protocol	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union	`path:"protocol" module:"openconfig-acl"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-acl"`
	SourceFlowLabel	*uint32	`path:"source-flow-label" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_Uint8 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol
// is to be set to a uint8 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_Uint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_Uint8) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config struct {
	DestinationMac	*string	`path:"destination-mac" module:"openconfig-acl"`
	DestinationMacMask	*string	`path:"destination-mac-mask" module:"openconfig-acl"`
	Ethertype	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union	`path:"ethertype" module:"openconfig-acl"`
	SourceMac	*string	`path:"source-mac" module:"openconfig-acl"`
	SourceMacMask	*string	`path:"source-mac-mask" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype
// is to be set to a E_OpenconfigPacketMatchTypes_ETHERTYPE value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE struct {
	E_OpenconfigPacketMatchTypes_ETHERTYPE	E_OpenconfigPacketMatchTypes_ETHERTYPE
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_ETHERTYPE:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State struct {
	DestinationMac	*string	`path:"destination-mac" module:"openconfig-acl"`
	DestinationMacMask	*string	`path:"destination-mac-mask" module:"openconfig-acl"`
	Ethertype	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union	`path:"ethertype" module:"openconfig-acl"`
	SourceMac	*string	`path:"source-mac" module:"openconfig-acl"`
	SourceMacMask	*string	`path:"source-mac-mask" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype
// is to be set to a E_OpenconfigPacketMatchTypes_ETHERTYPE value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE struct {
	E_OpenconfigPacketMatchTypes_ETHERTYPE	E_OpenconfigPacketMatchTypes_ETHERTYPE
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_ETHERTYPE:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State struct {
	Description	*string	`path:"description" module:"openconfig-acl"`
	MatchedOctets	*uint64	`path:"matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport struct {
	Config	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config struct {
	DestinationPort	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union	`path:"destination-port" module:"openconfig-acl"`
	SourcePort	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union	`path:"source-port" module:"openconfig-acl"`
	TcpFlags	[]E_OpenconfigPacketMatchTypes_TCP_FLAGS	`path:"tcp-flags" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort struct {
	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a string value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_String struct {
	String	string
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_String
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_String) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort{v}, nil
	case string:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_String{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort, string, uint16]", i, i)
	}
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort struct {
	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a string value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_String struct {
	String	string
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_String
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_String) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort{v}, nil
	case string:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_String{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort, string, uint16]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State struct {
	DestinationPort	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union	`path:"destination-port" module:"openconfig-acl"`
	SourcePort	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union	`path:"source-port" module:"openconfig-acl"`
	TcpFlags	[]E_OpenconfigPacketMatchTypes_TCP_FLAGS	`path:"tcp-flags" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port
// is to be set to a E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort struct {
	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port
// is to be set to a string value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_String struct {
	String	string
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_String
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_String) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort{v}, nil
	case string:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_String{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort, string, uint16]", i, i)
	}
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port within the YANG schema.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface {
	Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union()
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port
// is to be set to a E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort struct {
	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort	E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_String is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port
// is to be set to a string value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_String struct {
	String	string
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_String
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_String) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_Uint16 is used when /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port
// is to be set to a uint16 value.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_Uint16 struct {
	Uint16	uint16
}

// Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_Uint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_Uint16) Is_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort{v}, nil
	case string:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_String{v}, nil
	case uint16:
		return &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort, string, uint16]", i, i)
	}
}


// OpenconfigAcl_Acl_AclSets_AclSet_Config represents the /openconfig-acl/acl/acl-sets/acl-set/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_Config struct {
	Description	*string	`path:"description" module:"openconfig-acl"`
	Name	*string	`path:"name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_AclSets_AclSet_State represents the /openconfig-acl/acl/acl-sets/acl-set/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_State struct {
	Description	*string	`path:"description" module:"openconfig-acl"`
	Name	*string	`path:"name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Config represents the /openconfig-acl/acl/config YANG schema element.
type OpenconfigAcl_Acl_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces represents the /openconfig-acl/acl/interfaces YANG schema element.
type OpenconfigAcl_Acl_Interfaces struct {
	Interface	map[string]*OpenconfigAcl_Acl_Interfaces_Interface	`path:"interface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigAcl_Acl_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces) NewInterface(Id string) (*OpenconfigAcl_Acl_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigAcl_Acl_Interfaces_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigAcl_Acl_Interfaces_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface struct {
	Config	*OpenconfigAcl_Acl_Interfaces_Interface_Config	`path:"config" module:"openconfig-acl"`
	EgressAclSets	*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets	`path:"egress-acl-sets" module:"openconfig-acl"`
	Id	*string	`path:"id" module:"openconfig-acl"`
	IngressAclSets	*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets	`path:"ingress-acl-sets" module:"openconfig-acl"`
	InterfaceRef	*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef	`path:"interface-ref" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_Config represents the /openconfig-acl/acl/interfaces/interface/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_Config struct {
	Id	*string	`path:"id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets struct {
	EgressAclSet	map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet	`path:"egress-acl-set" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface/egress-acl-sets.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// NewEgressAclSet creates a new entry in the EgressAclSet list of the
// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) NewEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet)
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressAclSet", key)
	}

	t.EgressAclSet[key] = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet{
		SetName: &SetName,
		Type: Type,
	}

	return t.EgressAclSet[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct {
	AclEntries	*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries	`path:"acl-entries" module:"openconfig-acl"`
	Config	*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config	`path:"config" module:"openconfig-acl"`
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State	`path:"state" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}


	return map[string]interface{}{
		"set-name": *t.SetName,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct {
	AclEntry	map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry	`path:"acl-entry" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct {
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State struct {
	MatchedOctets	*uint64	`path:"matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config struct {
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State struct {
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets struct {
	IngressAclSet	map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet	`path:"ingress-acl-set" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface/ingress-acl-sets.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key struct {
	SetName	string	`path:"set-name"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type"`
}

// NewIngressAclSet creates a new entry in the IngressAclSet list of the
// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) NewIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet)
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: SetName,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressAclSet", key)
	}

	t.IngressAclSet[key] = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet{
		SetName: &SetName,
		Type: Type,
	}

	return t.IngressAclSet[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct {
	AclEntries	*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries	`path:"acl-entries" module:"openconfig-acl"`
	Config	*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config	`path:"config" module:"openconfig-acl"`
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State	`path:"state" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}


	return map[string]interface{}{
		"set-name": *t.SetName,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct {
	AclEntry	map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry	`path:"acl-entry" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct {
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State struct {
	MatchedOctets	*uint64	`path:"matched-octets" module:"openconfig-acl"`
	MatchedPackets	*uint64	`path:"matched-packets" module:"openconfig-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config struct {
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State struct {
	SetName	*string	`path:"set-name" module:"openconfig-acl"`
	Type	E_OpenconfigAcl_ACL_TYPE	`path:"type" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef struct {
	Config	*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config	`path:"config" module:"openconfig-acl"`
	State	*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State	`path:"state" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-acl/acl/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config struct {
	Interface	*string	`path:"interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State struct {
	Interface	*string	`path:"interface" module:"openconfig-acl"`
	Subinterface	*uint32	`path:"subinterface" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_Interfaces_Interface_State represents the /openconfig-acl/acl/interfaces/interface/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_State struct {
	Id	*string	`path:"id" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAcl_Acl_State represents the /openconfig-acl/acl/state YANG schema element.
type OpenconfigAcl_Acl_State struct {
	CounterCapability	E_OpenconfigAcl_ACL_COUNTER_CAPABILITY	`path:"counter-capability" module:"openconfig-acl"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces represents the /openconfig-interfaces/interfaces YANG schema element.
type OpenconfigInterfaces_Interfaces struct {
	Interface	map[string]*OpenconfigInterfaces_Interfaces_Interface	`path:"interface" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces) NewInterface(Name string) (*OpenconfigInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_Config	`path:"config" module:"openconfig-interfaces"`
	HoldTime	*OpenconfigInterfaces_Interfaces_Interface_HoldTime	`path:"hold-time" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_State	`path:"state" module:"openconfig-interfaces"`
	Subinterfaces	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces	`path:"subinterfaces" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Config represents the /openconfig-interfaces/interfaces/interface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Config struct {
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config	`path:"config" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State	`path:"state" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config represents the /openconfig-interfaces/interfaces/interface/hold-time/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config struct {
	Down	*uint32	`path:"down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_HoldTime_State represents the /openconfig-interfaces/interfaces/interface/hold-time/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_State struct {
	Down	*uint32	`path:"down" module:"openconfig-interfaces"`
	Up	*uint32	`path:"up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_State represents the /openconfig-interfaces/interfaces/interface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State struct {
	AdminStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus	`path:"admin-status" module:"openconfig-interfaces"`
	Counters	*OpenconfigInterfaces_Interfaces_Interface_State_Counters	`path:"counters" module:"openconfig-interfaces"`
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"openconfig-interfaces"`
	LastChange	*uint32	`path:"last-change" module:"openconfig-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus	`path:"oper-status" module:"openconfig-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_State_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State_Counters struct {
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*string	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces represents the /openconfig-interfaces/interfaces/interface/subinterfaces YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct {
	Subinterface	map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface	`path:"subinterface" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) NewSubinterface(Index uint32) (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct {
	Config	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config	`path:"config" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
	State	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State	`path:"state" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	AdminStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus	`path:"admin-status" module:"openconfig-interfaces"`
	Counters	*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters	`path:"counters" module:"openconfig-interfaces"`
	Description	*string	`path:"description" module:"openconfig-interfaces"`
	Enabled	*bool	`path:"enabled" module:"openconfig-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"openconfig-interfaces"`
	Index	*uint32	`path:"index" module:"openconfig-interfaces"`
	LastChange	*uint32	`path:"last-change" module:"openconfig-interfaces"`
	Name	*string	`path:"name" module:"openconfig-interfaces"`
	OperStatus	E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus	`path:"oper-status" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards	*uint64	`path:"in-discards" module:"openconfig-interfaces"`
	InErrors	*uint64	`path:"in-errors" module:"openconfig-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"openconfig-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear	*string	`path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards	*uint64	`path:"out-discards" module:"openconfig-interfaces"`
	OutErrors	*uint64	`path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"openconfig-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_OpenconfigAcl_ACL_COUNTER_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_ACL_COUNTER_CAPABILITY. An additional value named
// OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_ACL_COUNTER_CAPABILITY int64

// IsYANGGoEnum ensures that OpenconfigAcl_ACL_COUNTER_CAPABILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_ACL_COUNTER_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_ACL_COUNTER_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_ACL_COUNTER_CAPABILITY.
func (E_OpenconfigAcl_ACL_COUNTER_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET corresponds to the value UNSET of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_UNSET E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 0
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_AGGREGATE_ONLY corresponds to the value AGGREGATE_ONLY of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_AGGREGATE_ONLY E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 1
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_AGGREGATE corresponds to the value INTERFACE_AGGREGATE of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_AGGREGATE E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 2
	// OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_ONLY corresponds to the value INTERFACE_ONLY of OpenconfigAcl_ACL_COUNTER_CAPABILITY
	OpenconfigAcl_ACL_COUNTER_CAPABILITY_INTERFACE_ONLY E_OpenconfigAcl_ACL_COUNTER_CAPABILITY = 3
)


// E_OpenconfigAcl_ACL_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_ACL_TYPE. An additional value named
// OpenconfigAcl_ACL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_ACL_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAcl_ACL_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_ACL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_ACL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_ACL_TYPE.
func (E_OpenconfigAcl_ACL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_ACL_TYPE_UNSET corresponds to the value UNSET of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_UNSET E_OpenconfigAcl_ACL_TYPE = 0
	// OpenconfigAcl_ACL_TYPE_ACL_IPV4 corresponds to the value ACL_IPV4 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_IPV4 E_OpenconfigAcl_ACL_TYPE = 1
	// OpenconfigAcl_ACL_TYPE_ACL_IPV6 corresponds to the value ACL_IPV6 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_IPV6 E_OpenconfigAcl_ACL_TYPE = 2
	// OpenconfigAcl_ACL_TYPE_ACL_L2 corresponds to the value ACL_L2 of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_L2 E_OpenconfigAcl_ACL_TYPE = 3
	// OpenconfigAcl_ACL_TYPE_ACL_MIXED corresponds to the value ACL_MIXED of OpenconfigAcl_ACL_TYPE
	OpenconfigAcl_ACL_TYPE_ACL_MIXED E_OpenconfigAcl_ACL_TYPE = 4
)


// E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort. An additional value named
// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort int64

// IsYANGGoEnum ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort.
func (E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_UNSET corresponds to the value UNSET of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_UNSET E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort = 0
	// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_ANY corresponds to the value ANY of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort
	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_ANY E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort = 1
)


// E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort. An additional value named
// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort int64

// IsYANGGoEnum ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort.
func (E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_UNSET corresponds to the value UNSET of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_UNSET E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort = 0
	// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_ANY corresponds to the value ANY of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort
	OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_ANY E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort = 1
)


// E_OpenconfigAcl_FORWARDING_ACTION is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_FORWARDING_ACTION. An additional value named
// OpenconfigAcl_FORWARDING_ACTION_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_FORWARDING_ACTION int64

// IsYANGGoEnum ensures that OpenconfigAcl_FORWARDING_ACTION implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_FORWARDING_ACTION can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_FORWARDING_ACTION) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_FORWARDING_ACTION.
func (E_OpenconfigAcl_FORWARDING_ACTION) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_FORWARDING_ACTION_UNSET corresponds to the value UNSET of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_UNSET E_OpenconfigAcl_FORWARDING_ACTION = 0
	// OpenconfigAcl_FORWARDING_ACTION_ACCEPT corresponds to the value ACCEPT of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_ACCEPT E_OpenconfigAcl_FORWARDING_ACTION = 1
	// OpenconfigAcl_FORWARDING_ACTION_DROP corresponds to the value DROP of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_DROP E_OpenconfigAcl_FORWARDING_ACTION = 2
	// OpenconfigAcl_FORWARDING_ACTION_REJECT corresponds to the value REJECT of OpenconfigAcl_FORWARDING_ACTION
	OpenconfigAcl_FORWARDING_ACTION_REJECT E_OpenconfigAcl_FORWARDING_ACTION = 3
)


// E_OpenconfigAcl_LOG_ACTION is a derived int64 type which is used to represent
// the enumerated node OpenconfigAcl_LOG_ACTION. An additional value named
// OpenconfigAcl_LOG_ACTION_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAcl_LOG_ACTION int64

// IsYANGGoEnum ensures that OpenconfigAcl_LOG_ACTION implements the yang.GoEnum
// interface. This ensures that OpenconfigAcl_LOG_ACTION can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAcl_LOG_ACTION) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAcl_LOG_ACTION.
func (E_OpenconfigAcl_LOG_ACTION) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAcl_LOG_ACTION_UNSET corresponds to the value UNSET of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_UNSET E_OpenconfigAcl_LOG_ACTION = 0
	// OpenconfigAcl_LOG_ACTION_LOG_NONE corresponds to the value LOG_NONE of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_LOG_NONE E_OpenconfigAcl_LOG_ACTION = 1
	// OpenconfigAcl_LOG_ACTION_LOG_SYSLOG corresponds to the value LOG_SYSLOG of OpenconfigAcl_LOG_ACTION
	OpenconfigAcl_LOG_ACTION_LOG_SYSLOG E_OpenconfigAcl_LOG_ACTION = 2
)


// E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 1
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 3
)


// E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_OperStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_OperStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 3
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 4
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN corresponds to the value UNKNOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 5
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT corresponds to the value DORMANT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 6
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 7
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 8
)


// E_OpenconfigPacketMatchTypes_ETHERTYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_ETHERTYPE. An additional value named
// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_ETHERTYPE int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_ETHERTYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_ETHERTYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_ETHERTYPE.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigPacketMatchTypes_ETHERTYPE_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_UNSET E_OpenconfigPacketMatchTypes_ETHERTYPE = 0
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP corresponds to the value ETHERTYPE_ARP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ARP E_OpenconfigPacketMatchTypes_ETHERTYPE = 1
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 corresponds to the value ETHERTYPE_IPV4 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV4 E_OpenconfigPacketMatchTypes_ETHERTYPE = 2
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 corresponds to the value ETHERTYPE_IPV6 of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_IPV6 E_OpenconfigPacketMatchTypes_ETHERTYPE = 3
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP corresponds to the value ETHERTYPE_LLDP of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_LLDP E_OpenconfigPacketMatchTypes_ETHERTYPE = 4
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS corresponds to the value ETHERTYPE_MPLS of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_MPLS E_OpenconfigPacketMatchTypes_ETHERTYPE = 5
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE corresponds to the value ETHERTYPE_ROCE of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_ROCE E_OpenconfigPacketMatchTypes_ETHERTYPE = 6
	// OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN corresponds to the value ETHERTYPE_VLAN of OpenconfigPacketMatchTypes_ETHERTYPE
	OpenconfigPacketMatchTypes_ETHERTYPE_ETHERTYPE_VLAN E_OpenconfigPacketMatchTypes_ETHERTYPE = 7
)


// E_OpenconfigPacketMatchTypes_IP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_IP_PROTOCOL. An additional value named
// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_IP_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 0
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH corresponds to the value IP_AUTH of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 1
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE corresponds to the value IP_GRE of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 2
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP corresponds to the value IP_ICMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 3
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP corresponds to the value IP_IGMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 4
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP corresponds to the value IP_L2TP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 5
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM corresponds to the value IP_PIM of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 6
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP corresponds to the value IP_RSVP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 7
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP corresponds to the value IP_TCP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 8
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP corresponds to the value IP_UDP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 9
)


// E_OpenconfigPacketMatchTypes_TCP_FLAGS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_TCP_FLAGS. An additional value named
// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_TCP_FLAGS int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_TCP_FLAGS implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_TCP_FLAGS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_TCP_FLAGS.
func (E_OpenconfigPacketMatchTypes_TCP_FLAGS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_UNSET E_OpenconfigPacketMatchTypes_TCP_FLAGS = 0
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK corresponds to the value TCP_ACK of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ACK E_OpenconfigPacketMatchTypes_TCP_FLAGS = 1
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR corresponds to the value TCP_CWR of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_CWR E_OpenconfigPacketMatchTypes_TCP_FLAGS = 2
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE corresponds to the value TCP_ECE of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_ECE E_OpenconfigPacketMatchTypes_TCP_FLAGS = 3
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN corresponds to the value TCP_FIN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_FIN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 4
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH corresponds to the value TCP_PSH of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_PSH E_OpenconfigPacketMatchTypes_TCP_FLAGS = 5
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST corresponds to the value TCP_RST of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_RST E_OpenconfigPacketMatchTypes_TCP_FLAGS = 6
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN corresponds to the value TCP_SYN of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_SYN E_OpenconfigPacketMatchTypes_TCP_FLAGS = 7
	// OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG corresponds to the value TCP_URG of OpenconfigPacketMatchTypes_TCP_FLAGS
	OpenconfigPacketMatchTypes_TCP_FLAGS_TCP_URG E_OpenconfigPacketMatchTypes_TCP_FLAGS = 8
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_OpenconfigAcl_ACL_COUNTER_CAPABILITY": {
		1: {Name: "AGGREGATE_ONLY", DefiningModule: "openconfig-acl"},
		2: {Name: "INTERFACE_AGGREGATE", DefiningModule: "openconfig-acl"},
		3: {Name: "INTERFACE_ONLY", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_ACL_TYPE": {
		1: {Name: "ACL_IPV4", DefiningModule: "openconfig-acl"},
		2: {Name: "ACL_IPV6", DefiningModule: "openconfig-acl"},
		3: {Name: "ACL_L2", DefiningModule: "openconfig-acl"},
		4: {Name: "ACL_MIXED", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort": {
		1: {Name: "ANY"},
	},
	"E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort": {
		1: {Name: "ANY"},
	},
	"E_OpenconfigAcl_FORWARDING_ACTION": {
		1: {Name: "ACCEPT", DefiningModule: "openconfig-acl"},
		2: {Name: "DROP", DefiningModule: "openconfig-acl"},
		3: {Name: "REJECT", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigAcl_LOG_ACTION": {
		1: {Name: "LOG_NONE", DefiningModule: "openconfig-acl"},
		2: {Name: "LOG_SYSLOG", DefiningModule: "openconfig-acl"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigPacketMatchTypes_ETHERTYPE": {
		1: {Name: "ETHERTYPE_ARP", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "ETHERTYPE_IPV4", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "ETHERTYPE_IPV6", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "ETHERTYPE_LLDP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "ETHERTYPE_MPLS", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "ETHERTYPE_ROCE", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "ETHERTYPE_VLAN", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_IP_PROTOCOL": {
		1: {Name: "IP_AUTH", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "IP_GRE", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "IP_ICMP", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "IP_IGMP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "IP_L2TP", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "IP_PIM", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "IP_RSVP", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "IP_TCP", DefiningModule: "openconfig-packet-match-types"},
		9: {Name: "IP_UDP", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPacketMatchTypes_TCP_FLAGS": {
		1: {Name: "TCP_ACK", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "TCP_CWR", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "TCP_ECE", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "TCP_FIN", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "TCP_PSH", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "TCP_RST", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "TCP_SYN", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "TCP_URG", DefiningModule: "openconfig-packet-match-types"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9d, 0x7d, 0x53, 0xdb, 0xc8,
		0xb2, 0xff, 0xff, 0xe7, 0x55, 0xb8, 0x5c, 0xf7, 0x8f, 0x50, 0x27, 0x06, 0x63, 0x8c, 0x09, 0xa9,
		0xba, 0x75, 0x8a, 0x25, 0x6c, 0x96, 0xdf, 0x21, 0x81, 0x22, 0xec, 0xde, 0xdf, 0x5e, 0xe0, 0x50,
		0x8a, 0x2d, 0x12, 0x55, 0x8c, 0xec, 0x23, 0xcb, 0xbb, 0xa1, 0x12, 0xde, 0xfb, 0x2d, 0x3f, 0xc9,
		0xf2, 0xa3, 0x34, 0x33, 0x3d, 0xb2, 0x6c, 0x3e, 0xa9, 0x73, 0x96, 0x27, 0x6b, 0x24, 0xf5, 0x74,
		0xf7, 0xf7, 0x3b, 0x3d, 0xd3, 0xdd, 0x3f, 0xb6, 0x0a, 0x85, 0x42, 0xa1, 0xf8, 0xd1, 0x79, 0x74,
		0x8b, 0x6f, 0x0b, 0xc5, 0x86, 0xfb, 0x97, 0x57, 0x77, 0x8b, 0xaf, 0x07, 0xbf, 0xfd, 0x97, 0xe7,
		0x37, 0x8a, 0x6f, 0x0b, 0x7b, 0xc3, 0x1f, 0x4f, 0x5a, 0xfe, 0x83, 0xf7, 0xa5, 0xf8, 0xb6, 0x50,
		0x1e, 0xfe, 0xe2, 0x9d, 0x17, 0x14, 0xdf, 0x16, 0x06, 0x43, 0xf4, 0x7f, 0xe1, 0xd4, 0x9b, 0x13,
		0xbf, 0x98, 0x18, 0xbb, 0xf7, 0xc7, 0xd7, 0x93, 0x7f, 0x9a, 0xbc, 0x41, 0xf4, 0xeb, 0xe9, 0x1b,
		0x45, 0x7f, 0xb8, 0x0c, 0xdc, 0x07, 0xef, 0xfb, 0xcc, 0x2d, 0x26, 0x6e, 0xd3, 0xaa, 0x97, 0x66,
		0xef, 0xd4, 0xff, 0xc4, 0xa7, 0x56, 0x37, 0xa8, 0xbb, 0x73, 0xaf, 0x1e, 0x3c, 0x8d, 0xfb, 0xf4,
		0x77, 0x2b, 0xe8, 0x3d, 0x50, 0xb1, 0x3d, 0xb8, 0xd1, 0xeb, 0xf9, 0x1f, 0xfc, 0xcd, 0xe9, 0x1c,
		0x07, 0x5f, 0xba, 0x8f, 0xae, 0x1f, 0x16, 0xdf, 0x16, 0xc2, 0xa0, 0xeb, 0x2e, 0xf8, 0x60, 0xec,
		0x53, 0xa3, 0xe7, 0x9a, 0xf9, 0xe0, 0xf3, 0xc4, 0x6f, 0x9e, 0xa7, 0xde, 0x78, 0x5a, 0xc4, 0x71,
		0x51, 0x97, 0x3a, 0x6e, 0xd8, 0x59, 0xfc, 0x3a, 0x31, 0xb9, 0x0f, 0x3e, 0xb9, 0xe0, 0x21, 0xe7,
		0x4f, 0x42, 0xe2, 0x64, 0xa4, 0x99, 0x94, 0xf4, 0x93, 0x93, 0x76, 0x92, 0x94, 0x27, 0x4b, 0x79,
		0xd2, 0x94, 0x26, 0x6f, 0xfe, 0x24, 0x2e, 0x98, 0xcc, 0xc4, 0x49, 0x9d, 0x9e, 0xdc, 0x64, 0x29,
		0x4c, 0xcd, 0x71, 0x92, 0x0c, 0x96, 0x4f, 0x75, 0xea, 0x29, 0x57, 0x99, 0x7a, 0x75, 0x15, 0x50,
		0x55, 0x05, 0x6d, 0x95, 0xd0, 0x56, 0x0d, 0x2d, 0x15, 0x59, 0xae, 0x2a, 0x09, 0x2a, 0x93, 0x5a,
		0x75, 0x26, 0x54, 0xc8, 0xf5, 0xc3, 0xc0, 0x73, 0x3b, 0xe9, 0x25, 0x18, 0x57, 0xa7, 0xd1, 0xc5,
		0x29, 0x45, 0x91, 0x4e, 0xb5, 0x94, 0x55, 0x4c, 0x47, 0xd5, 0xf4, 0x55, 0x4e, 0x57, 0xf5, 0x8c,
		0x55, 0xd0, 0x58, 0x15, 0x8d, 0x54, 0x32, 0x9d, 0x6a, 0xa6, 0x54, 0x51, 0x65, 0x55, 0x9d, 0x51,
		0xd9, 0x27, 0x75, 0xb9, 0x4f, 0x2b, 0xee, 0x93, 0xaa, 0xdc, 0xd5, 0xd4, 0x57, 0x5b, 0x8d, 0x4d,
		0xd4, 0xd9, 0x5c, 0xad, 0x4d, 0xd5, 0x5b, 0x4c, 0xcd, 0xc5, 0xd4, 0x5d, 0x44, 0xed, 0xd5, 0xd4,
		0x5f, 0xd1, 0x0c, 0xb4, 0xcd, 0x21, 0x66, 0x16, 0xa1, 0xd7, 0xf2, 0x3b, 0xfa, 0xb3, 0x35, 0x36,
		0x8e, 0xc1, 0x40, 0x9a, 0x22, 0xd6, 0x33, 0x11, 0x63, 0x53, 0x91, 0x30, 0x19, 0x39, 0xd3, 0x91,
		0x32, 0x21, 0x71, 0x53, 0x12, 0x37, 0x29, 0x51, 0xd3, 0xd2, 0x33, 0x31, 0x4d, 0x53, 0x33, 0x36,
		0xb9, 0x68, 0x80, 0xfa, 0x48, 0x67, 0x0d, 0x27, 0x79, 0xa4, 0x76, 0xc3, 0xf1, 0x0c, 0x27, 0xc4,
		0xcc, 0x10, 0xc5, 0x0c, 0x52, 0xd2, 0x30, 0xe5, 0x0d, 0x54, 0xda, 0x50, 0xad, 0x19, 0xac, 0x35,
		0xc3, 0xb5, 0x62, 0xc0, 0x66, 0x86, 0x6c, 0x68, 0xd0, 0x62, 0x86, 0x1d, 0x0d, 0xf4, 0xd0, 0x0a,
		0xfe, 0x76, 0x82, 0x86, 0xe7, 0x7f, 0x29, 0x0d, 0xd0, 0x51, 0x4e, 0x4f, 0x46, 0x9a, 0x3c, 0x7b,
		0x0b, 0xa1, 0x69, 0x1d, 0xba, 0x81, 0xb2, 0xd0, 0x70, 0x52, 0xee, 0xc0, 0x86, 0x5b, 0xb0, 0xe7,
		0x1e, 0x6c, 0xb9, 0x09, 0xeb, 0xee, 0xc2, 0xba, 0xdb, 0xb0, 0xea, 0x3e, 0x64, 0xdc, 0x88, 0x90,
		0x3b, 0x89, 0xde, 0xf4, 0xfa, 0xa9, 0xed, 0xda, 0xd1, 0x57, 0xaf, 0xe1, 0xfa, 0xa1, 0x17, 0x3e,
		0x05, 0xee, 0x83, 0xa4, 0xd2, 0x8e, 0x98, 0xc0, 0x81, 0xe0, 0x98, 0x67, 0xc3, 0x47, 0xfd, 0xc5,
		0xe9, 0x58, 0x30, 0x87, 0x91, 0x40, 0x7e, 0xbd, 0xb8, 0xfa, 0x9f, 0xe3, 0xab, 0x77, 0x67, 0x1f,
		0xdf, 0xdf, 0x1f, 0x9f, 0x5c, 0x9f, 0x5d, 0x7c, 0x94, 0x36, 0x8b, 0x3f, 0x9c, 0x66, 0xb7, 0x1f,
		0xfa, 0xba, 0x11, 0x1d, 0xb7, 0xf7, 0xef, 0x87, 0xf8, 0x88, 0x13, 0xa2, 0x39, 0x3e, 0x39, 0x39,
		0xbd, 0xbc, 0x2e, 0x8a, 0xdf, 0xe4, 0xf9, 0xf5, 0xba, 0x49, 0xe2, 0xea, 0xf4, 0xff, 0x9d, 0x9e,
		0x20, 0x89, 0xb7, 0x85, 0xe2, 0xbb, 0xab, 0x8b, 0x4b, 0x0b, 0x72, 0x10, 0x1d, 0xf1, 0x2e, 0x6f,
		0xa8, 0xb0, 0x95, 0x03, 0x3d, 0x29, 0x36, 0x5b, 0xf6, 0xa8, 0x65, 0x6c, 0x6c, 0x21, 0x04, 0x7c,
		0xe7, 0x3e, 0x38, 0xdd, 0x66, 0x1f, 0xea, 0xcf, 0x2f, 0xde, 0xdf, 0x7f, 0xbc, 0xf8, 0x78, 0x0a,
		0x5d, 0x85, 0xae, 0x42, 0x57, 0xa1, 0xab, 0x2f, 0x9a, 0xae, 0xf6, 0x9c, 0x21, 0x3c, 0x75, 0x56,
		0x26, 0x7d, 0x80, 0x80, 0x9f, 0xf5, 0x65, 0xf1, 0xe9, 0xcf, 0x4f, 0xe7, 0x17, 0xef, 0x61, 0x69,
		0x99, 0xb3, 0xb4, 0x95, 0x86, 0x22, 0x8f, 0x7d, 0xbf, 0x15, 0x3a, 0x62, 0xfc, 0xae, 0xd8, 0xa9,
		0x7f, 0x75, 0x1f, 0x9d, 0xb6, 0x13, 0x7e, 0xed, 0xe9, 0xd5, 0x6e, 0xab, 0xed, 0xfa, 0x83, 0x5d,
		0x83, 0x1e, 0x92, 0xed, 0x0e, 0xff, 0xdf, 0x3f, 0xcf, 0x35, 0xfa, 0x66, 0x37, 0x76, 0x5a, 0x23,
		0xfa, 0xfe, 0x69, 0x77, 0xb8, 0xdb, 0xb7, 0x2b, 0xb2, 0xe7, 0x30, 0x78, 0xb4, 0x30, 0xe8, 0xd6,
		0x43, 0x7f, 0xa8, 0xf2, 0x17, 0xd1, 0x93, 0x1d, 0xd7, 0x9b, 0xf7, 0xc3, 0xff, 0x7f, 0x72, 0xc3,
		0xce, 0xf0, 0x6b, 0xef, 0xcb, 0xe9, 0xe0, 0xa9, 0x46, 0xdf, 0x3e, 0xdd, 0x1f, 0x0f, 0x1e, 0xea,
		0x7e, 0xc8, 0xde, 0xb6, 0x56, 0x33, 0xef, 0x06, 0x73, 0x5e, 0xec, 0x84, 0x4e, 0xe8, 0xca, 0xed,
		0x08, 0x0d, 0x86, 0xcb, 0xd9, 0x86, 0x50, 0x85, 0x0d, 0xa1, 0x1c, 0x50, 0x66, 0x36, 0x84, 0x14,
		0xd6, 0xad, 0x6c, 0x08, 0xb1, 0xc2, 0x66, 0x85, 0xcd, 0x0a, 0x9b, 0x15, 0x36, 0x1b, 0x42, 0x9b,
		0xb6, 0xd0, 0x66, 0x43, 0x88, 0x0d, 0xa1, 0x69, 0x49, 0xb0, 0x21, 0xb4, 0x92, 0x50, 0x03, 0x1b,
		0x42, 0x6c, 0x08, 0x41, 0x57, 0xa1, 0xab, 0xd0, 0xd5, 0x17, 0x4e, 0x57, 0xd9, 0x10, 0x9a, 0x2f,
		0x13, 0x36, 0x84, 0xd8, 0x10, 0x5a, 0x39, 0x4b, 0x63, 0x43, 0x68, 0xd9, 0x86, 0x90, 0xc4, 0x96,
		0x43, 0x41, 0x78, 0x3f, 0xe8, 0x53, 0xff, 0x99, 0x56, 0xb5, 0x1d, 0x94, 0x69, 0x52, 0x92, 0x90,
		0x7e, 0x88, 0xeb, 0x45, 0xd1, 0x68, 0x53, 0x4c, 0x4a, 0x13, 0xf4, 0x74, 0x40, 0x7d, 0x06, 0x35,
		0x66, 0xcf, 0x34, 0x1b, 0x4c, 0x26, 0x0b, 0x8c, 0x34, 0x4c, 0x1b, 0xcb, 0x1e, 0xd2, 0x30, 0x2d,
		0x7a, 0x3c, 0xe3, 0x34, 0xcc, 0x86, 0xdb, 0xa9, 0x07, 0x5e, 0x5b, 0x04, 0x53, 0x63, 0xa5, 0x8e,
		0xc6, 0x83, 0xca, 0xec, 0xbf, 0x97, 0x49, 0xc8, 0x5c, 0x41, 0xa4, 0x82, 0xfd, 0xf7, 0x1c, 0x90,
		0x5e, 0xb1, 0xc8, 0x43, 0xec, 0x60, 0x4c, 0xe0, 0xf9, 0x22, 0xc7, 0x96, 0x46, 0x80, 0xf9, 0x66,
		0x1d, 0x4f, 0x1b, 0xb9, 0xff, 0xe9, 0xba, 0x7e, 0xdd, 0x2d, 0x79, 0x0d, 0xc1, 0x33, 0x47, 0xb1,
		0x41, 0xf1, 0x7c, 0x78, 0x3e, 0x3c, 0x5f, 0xae, 0x3c, 0x5f, 0xd7, 0xf3, 0xc3, 0xfd, 0x8a, 0xa0,
		0xe7, 0x3b, 0x14, 0x18, 0xea, 0xca, 0xf1, 0xbf, 0xb8, 0x62, 0x41, 0x49, 0xc1, 0x08, 0xf5, 0x07,
		0xcf, 0xb7, 0xb0, 0xe9, 0x21, 0xba, 0x35, 0x15, 0x0d, 0xdb, 0x0f, 0xed, 0x5a, 0x18, 0xf7, 0xd7,
		0x60, 0xb0, 0x86, 0x7f, 0xe7, 0x7d, 0xf1, 0xfa, 0x15, 0x21, 0xcb, 0x72, 0x31, 0x3d, 0xc1, 0xc8,
		0xfc, 0x07, 0xe7, 0xfb, 0xda, 0x4d, 0x55, 0xb5, 0x72, 0x54, 0x3d, 0xaa, 0x1d, 0x56, 0x8e, 0x0e,
		0xd6, 0x68, 0xce, 0x72, 0x12, 0x87, 0xbd, 0x23, 0x9e, 0xb7, 0x8a, 0x78, 0x9e, 0xf1, 0x81, 0x7f,
		0x89, 0x70, 0x9e, 0xc9, 0x01, 0xff, 0x6c, 0xa2, 0x79, 0x9e, 0xdf, 0xee, 0x86, 0x25, 0xcf, 0x0f,
		0xdd, 0xe0, 0xc1, 0x31, 0x29, 0x86, 0x17, 0xed, 0x91, 0x4e, 0x0d, 0x48, 0x7c, 0x8f, 0xf8, 0x1e,
		0xf1, 0xbd, 0x34, 0x03, 0x50, 0x66, 0x8d, 0xb5, 0x2d, 0x6b, 0xdb, 0xfc, 0xad, 0x6d, 0x73, 0xbb,
		0x95, 0x3d, 0x05, 0xb5, 0xf9, 0xca, 0x71, 0x3c, 0xeb, 0x3d, 0xdc, 0xd9, 0xe8, 0xd9, 0xd6, 0x38,
		0xd5, 0x31, 0x92, 0x6f, 0x29, 0x70, 0x1f, 0xe4, 0xbc, 0xf3, 0xe4, 0xb0, 0x38, 0xe9, 0x34, 0x4e,
		0xda, 0x7b, 0xc0, 0x47, 0x5b, 0xf0, 0xd1, 0xde, 0x03, 0x89, 0x8f, 0xb2, 0x1c, 0xcc, 0x0e, 0x17,
		0x13, 0x36, 0x77, 0x71, 0xb3, 0xb7, 0x61, 0xfe, 0xd6, 0xdc, 0x80, 0x2d, 0x77, 0x60, 0xdd, 0x2d,
		0x58, 0x77, 0x0f, 0x36, 0xdd, 0x84, 0x70, 0x70, 0x4e, 0x2a, 0xbd, 0x43, 0xc8, 0x7d, 0xcc, 0x72,
		0x06, 0x7b, 0x47, 0xaf, 0x4d, 0x23, 0x2c, 0x49, 0xce, 0x45, 0x3a, 0x94, 0x2c, 0xed, 0x64, 0x6c,
		0x3a, 0x1b, 0xeb, 0x4e, 0xc7, 0xb6, 0xf3, 0xc9, 0xcc, 0x09, 0x65, 0xe6, 0x8c, 0xb2, 0x70, 0x4a,
		0xb2, 0xce, 0x49, 0xd8, 0x49, 0x45, 0x02, 0x10, 0x4f, 0x6f, 0x99, 0xd1, 0xf6, 0xa6, 0xeb, 0x3c,
		0xc8, 0xa6, 0xb8, 0xcc, 0x30, 0x97, 0x43, 0x0b, 0x63, 0x5f, 0x46, 0x2b, 0xea, 0x9e, 0x5a, 0xbc,
		0x8d, 0x1c, 0x64, 0x67, 0xfa, 0x17, 0xc3, 0x9f, 0xfb, 0xcb, 0xdb, 0xad, 0x7c, 0x2a, 0x8e, 0xe4,
		0x86, 0x63, 0xa7, 0xfb, 0x39, 0x03, 0x3c, 0x9a, 0xb8, 0x0b, 0x90, 0x04, 0x24, 0x01, 0x49, 0x40,
		0x12, 0x90, 0x94, 0x12, 0x92, 0x6e, 0xc6, 0x90, 0xf4, 0xdf, 0xf5, 0x6e, 0x10, 0xb8, 0x7e, 0xf8,
		0x6a, 0x7b, 0x77, 0x67, 0x67, 0x37, 0xfa, 0xc4, 0xdd, 0xf0, 0x92, 0xb8, 0x9f, 0xed, 0xcc, 0xf9,
		0x5d, 0x34, 0x72, 0xc3, 0xfd, 0x9e, 0x5b, 0x74, 0xcb, 0xd5, 0xea, 0x4f, 0x38, 0xbe, 0x3f, 0xc6,
		0x5d, 0x5b, 0x71, 0xfe, 0x89, 0xd0, 0xf1, 0xae, 0x68, 0x68, 0xa9, 0x60, 0x27, 0xfa, 0x1f, 0x7d,
		0x77, 0xe5, 0x3e, 0x88, 0x6c, 0x05, 0xc8, 0x69, 0xd2, 0xb3, 0xc8, 0x76, 0x89, 0x44, 0x35, 0xc4,
		0x59, 0x4a, 0x25, 0x94, 0xa2, 0x68, 0x35, 0x66, 0x58, 0x21, 0x66, 0x48, 0xcc, 0x90, 0x98, 0x21,
		0x31, 0x43, 0x16, 0x68, 0x2c, 0xd0, 0x58, 0xa0, 0xb1, 0x40, 0x23, 0x66, 0x48, 0xcc, 0x90, 0x98,
		0x21, 0x90, 0x04, 0x24, 0x01, 0x49, 0x40, 0x12, 0x31, 0x43, 0x62, 0x86, 0xf9, 0x8b, 0x19, 0x4a,
		0x46, 0x96, 0xb2, 0x08, 0x19, 0x0a, 0x14, 0xc6, 0x12, 0x8c, 0x18, 0x72, 0x1a, 0x5d, 0x59, 0xe3,
		0xf2, 0x79, 0x28, 0x3d, 0xae, 0x63, 0x74, 0xe1, 0xa1, 0x0b, 0x8f, 0x02, 0x8f, 0x26, 0x5f, 0x88,
		0x7c, 0xa1, 0x75, 0xf7, 0xd0, 0x79, 0x2a, 0x81, 0x39, 0xe5, 0x99, 0xa9, 0x84, 0x99, 0x1b, 0x35,
		0x59, 0x71, 0x0a, 0xfd, 0xa4, 0x62, 0xe4, 0x3a, 0x95, 0xbe, 0xfd, 0x57, 0x55, 0x20, 0x7f, 0xbe,
		0x37, 0x0a, 0x49, 0xf3, 0x3d, 0x2c, 0x68, 0x7f, 0x0b, 0x4b, 0x8f, 0x4e, 0x58, 0xff, 0x4a, 0xea,
		0xbc, 0x06, 0x92, 0x8e, 0xa5, 0x47, 0x02, 0xbd, 0x9e, 0x0a, 0x92, 0x40, 0x9f, 0xb1, 0xb1, 0x42,
		0x8b, 0x2d, 0x1a, 0x73, 0x3e, 0xc8, 0xb1, 0x58, 0xa6, 0x66, 0xc3, 0xed, 0x84, 0x9e, 0xdf, 0xe7,
		0x4d, 0x25, 0xa7, 0xd1, 0x08, 0xdc, 0x4e, 0x47, 0xfe, 0x04, 0xd6, 0xbc, 0x9b, 0xd0, 0xf7, 0x27,
		0x6f, 0xee, 0xc2, 0x96, 0xdb, 0xb0, 0xee, 0x3e, 0xac, 0xbb, 0x91, 0x0c, 0xdc, 0x89, 0x5c, 0x5c,
		0xb5, 0xb0, 0x1e, 0x3d, 0x80, 0xda, 0x7f, 0x55, 0x4b, 0xe2, 0x5a, 0x30, 0x2e, 0xcf, 0x2b, 0x38,
		0xe6, 0xa5, 0x13, 0x86, 0x6e, 0xe0, 0x8b, 0x37, 0xd1, 0x29, 0xfe, 0xfb, 0xd5, 0xab, 0x9b, 0x72,
		0xe9, 0xe8, 0xee, 0xe7, 0xcd, 0x5e, 0xe9, 0xe8, 0x6e, 0xf0, 0xed, 0x5e, 0xff, 0xcb, 0xe0, 0xfb,
		0xca, 0x4d, 0xb9, 0x54, 0x1d, 0x7d, 0x7f, 0x70, 0x53, 0x2e, 0x1d, 0xdc, 0x6d, 0xdf, 0xde, 0xee,
		0x6c, 0xff, 0xd8, 0x7f, 0x56, 0xbf, 0x70, 0x77, 0x78, 0xb3, 0xed, 0x9f, 0xaf, 0x6e, 0xf6, 0x4a,
		0x95, 0xbb, 0xd1, 0x0f, 0xfb, 0x37, 0xe5, 0x52, 0xe5, 0x6e, 0x7b, 0xfb, 0xbf, 0xe4, 0x74, 0xf8,
		0x6e, 0x83, 0xce, 0x24, 0x37, 0x3a, 0xf5, 0xb6, 0x05, 0x40, 0xec, 0x8d, 0x0a, 0x02, 0x82, 0x80,
		0x20, 0xe0, 0x8b, 0x45, 0x40, 0x41, 0x1f, 0x10, 0xf7, 0x03, 0x92, 0xdd, 0xef, 0x64, 0xeb, 0x34,
		0x8f, 0xfe, 0x59, 0x38, 0xab, 0x62, 0xa3, 0x6e, 0xb3, 0x25, 0x07, 0x3b, 0x33, 0xbc, 0xa5, 0x3a,
		0xce, 0xd1, 0xf8, 0x16, 0x6b, 0x03, 0x0b, 0x1b, 0xdb, 0xe4, 0x94, 0x3a, 0xdf, 0xd7, 0x7e, 0x4a,
		0x6b, 0xfb, 0x6b, 0x3c, 0xa7, 0x39, 0x3d, 0xc0, 0xb4, 0x49, 0xe4, 0xf2, 0x6b, 0xab, 0x5d, 0x6a,
		0x7a, 0x8f, 0x5e, 0x28, 0xcf, 0x30, 0xc7, 0x43, 0x43, 0x33, 0xa1, 0x99, 0xd0, 0xcc, 0x17, 0x4b,
		0x33, 0xbb, 0x9e, 0x1f, 0xbe, 0x81, 0x67, 0xc2, 0x33, 0xe1, 0x99, 0x1b, 0xcb, 0x33, 0x2b, 0x07,
		0x07, 0x10, 0x4d, 0x88, 0xe6, 0xe2, 0x69, 0x6c, 0x07, 0xad, 0xb0, 0x55, 0x6f, 0x35, 0xe5, 0x79,
		0x66, 0x34, 0x32, 0x34, 0x13, 0x9a, 0x09, 0xcd, 0x7c, 0xb1, 0x34, 0xd3, 0x6b, 0x97, 0x46, 0xae,
		0xa0, 0x14, 0xf6, 0xee, 0x62, 0x61, 0x53, 0xef, 0x48, 0x70, 0xcc, 0xa1, 0x24, 0x72, 0xcf, 0x38,
		0x6d, 0xd1, 0x78, 0x8b, 0x74, 0xde, 0x32, 0xad, 0xb7, 0x27, 0xec, 0x4c, 0x68, 0x7e, 0x46, 0xdc,
		0x30, 0x2b, 0xda, 0x9f, 0x25, 0x53, 0xb4, 0xb8, 0x0c, 0xc8, 0x64, 0x39, 0xb0, 0xaa, 0xa9, 0xaf,
		0x1c, 0x54, 0x37, 0x68, 0xf2, 0xb7, 0xd6, 0x63, 0xd4, 0xbb, 0x3c, 0xa7, 0x8d, 0x5b, 0x04, 0x2a,
		0xaf, 0xe1, 0xfa, 0xa1, 0x17, 0x3e, 0x59, 0x4e, 0x19, 0xb7, 0x81, 0x57, 0x67, 0xc3, 0x47, 0xff,
		0xc5, 0xe9, 0x58, 0x2c, 0xc2, 0x30, 0x12, 0xd4, 0xd9, 0xe5, 0xfd, 0xe5, 0xd5, 0xc5, 0xf5, 0xc5,
		0xc9, 0xc5, 0x79, 0xd1, 0x66, 0x7c, 0xa0, 0x63, 0x0d, 0x81, 0xed, 0xa2, 0xf0, 0xb4, 0xb0, 0xde,
		0x5f, 0x9d, 0x16, 0xd7, 0x11, 0x52, 0xb2, 0x93, 0xd0, 0xf1, 0xef, 0xd7, 0xbf, 0x21, 0xa2, 0xa5,
		0x22, 0x3a, 0xaf, 0x5c, 0x5f, 0x22, 0xa2, 0xa5, 0x22, 0xba, 0x3e, 0x41, 0x42, 0xcb, 0x25, 0xf4,
		0xfb, 0x3b, 0x24, 0x94, 0x00, 0x6c, 0x67, 0x1f, 0x90, 0xd0, 0x52, 0x09, 0x5d, 0x7d, 0xfa, 0x03,
		0x25, 0x5a, 0x2e, 0xa2, 0xb3, 0x93, 0x0f, 0x88, 0x28, 0x41, 0x44, 0xef, 0xad, 0x8a, 0xc8, 0xca,
		0xc8, 0x77, 0xec, 0x20, 0x65, 0xfc, 0x3c, 0x22, 0xb5, 0xb9, 0xfb, 0x7b, 0x08, 0xf6, 0x52, 0xc4,
		0xa6, 0xc6, 0x67, 0x37, 0xc9, 0x58, 0xa2, 0xec, 0x26, 0x4d, 0xdd, 0x80, 0xdd, 0x24, 0x59, 0xe8,
		0x23, 0x3b, 0x8c, 0xec, 0xb0, 0x75, 0x46, 0x45, 0xaa, 0x1b, 0xcd, 0x2d, 0x5b, 0xd3, 0xfe, 0xab,
		0x9a, 0xb3, 0x16, 0xe8, 0xed, 0xbf, 0xaa, 0x6b, 0xdc, 0xf8, 0x9c, 0xea, 0x72, 0x99, 0xf2, 0x20,
		0x8a, 0x69, 0x50, 0x4c, 0x43, 0xf1, 0xbd, 0x28, 0xa6, 0xc1, 0x72, 0x89, 0xe5, 0x12, 0xcb, 0x25,
		0x96, 0x4b, 0x2c, 0x97, 0x58, 0x2e, 0x59, 0x0c, 0x22, 0x52, 0x4c, 0x03, 0x04, 0x04, 0x01, 0x41,
		0x40, 0x8a, 0x69, 0x88, 0xfd, 0x23, 0xc9, 0x71, 0x62, 0x78, 0x92, 0x1c, 0xe7, 0x4f, 0x29, 0xc5,
		0x34, 0x56, 0x3b, 0xa7, 0xec, 0x50, 0x5b, 0x27, 0x97, 0x14, 0xd3, 0x80, 0x66, 0x42, 0x33, 0xa1,
		0x99, 0x14, 0xd3, 0x80, 0x67, 0xc2, 0x33, 0xe1, 0x99, 0xba, 0x53, 0x4a, 0x31, 0x0d, 0x88, 0xe6,
		0xd2, 0x69, 0xa4, 0x98, 0x06, 0x34, 0x13, 0x9a, 0x09, 0xcd, 0xa4, 0x98, 0xc6, 0x94, 0x24, 0x28,
		0xa6, 0x41, 0x31, 0x8d, 0x6c, 0x69, 0x7e, 0x46, 0xdc, 0x30, 0x2b, 0xda, 0x9f, 0x25, 0x53, 0xb4,
		0xb8, 0x0c, 0xc8, 0x64, 0x39, 0xb0, 0xaa, 0xa9, 0xa7, 0x98, 0xc6, 0x0a, 0x46, 0xa5, 0x98, 0x06,
		0xc5, 0x34, 0x96, 0x0a, 0x8a, 0x62, 0x1a, 0x6a, 0xc2, 0xa2, 0x98, 0x46, 0x92, 0x84, 0x28, 0xa6,
		0x91, 0x28, 0x22, 0x8a, 0x69, 0x24, 0x8a, 0x88, 0x62, 0x1a, 0x49, 0x12, 0xa2, 0x98, 0x46, 0x22,
		0xb0, 0x51, 0x4c, 0x23, 0x41, 0x42, 0x14, 0xd3, 0x48, 0x14, 0x11, 0xc5, 0x34, 0x92, 0x45, 0x44,
		0x31, 0x0d, 0x76, 0x90, 0xb2, 0x50, 0x75, 0x8a, 0x69, 0xb0, 0x9b, 0x34, 0x1c, 0x9f, 0xdd, 0xa4,
		0x45, 0x37, 0x60, 0x37, 0x49, 0x2c, 0x88, 0x44, 0x76, 0x18, 0xd9, 0x61, 0xb6, 0x51, 0x91, 0x62,
		0x1a, 0x0b, 0x8b, 0x69, 0x48, 0x54, 0x6c, 0x28, 0x48, 0xd6, 0xd2, 0xf8, 0xd4, 0x7f, 0xa0, 0x55,
		0x95, 0xd2, 0xd8, 0xca, 0x50, 0x43, 0xa4, 0x34, 0x43, 0x56, 0x23, 0x8a, 0x46, 0xd5, 0x44, 0x44,
		0x74, 0x40, 0x6f, 0xf6, 0xd5, 0xe7, 0x4e, 0x63, 0xde, 0x7a, 0x78, 0x55, 0xd3, 0x9e, 0xad, 0x38,
		0xea, 0xd5, 0x34, 0x05, 0x6d, 0x58, 0x1e, 0xc5, 0x98, 0xd9, 0x4a, 0x30, 0x59, 0x69, 0xe6, 0x2a,
		0xc5, 0x54, 0xc5, 0x99, 0xa9, 0x38, 0x13, 0xb5, 0xc0, 0x3c, 0xb3, 0xf5, 0x79, 0xa6, 0xe5, 0x4c,
		0x8a, 0xf5, 0x91, 0xfe, 0x0a, 0x95, 0x2c, 0x12, 0xa9, 0x26, 0x25, 0x5e, 0xb3, 0xa8, 0x4c, 0xcd,
		0xa2, 0xdc, 0x2c, 0x2b, 0xa9, 0x59, 0x94, 0xb5, 0x91, 0x47, 0x03, 0x51, 0xb3, 0x88, 0xa8, 0x14,
		0x51, 0x29, 0xa2, 0x52, 0x2b, 0x88, 0x4a, 0xd5, 0x88, 0x4a, 0xf5, 0x03, 0x45, 0x4e, 0xe9, 0xe1,
		0xb8, 0xf4, 0xeb, 0xdd, 0x8f, 0xbd, 0xd7, 0xd5, 0xe7, 0xb7, 0xdb, 0x3f, 0x0e, 0x9f, 0xa7, 0x7f,
		0xf9, 0x73, 0xde, 0xc7, 0xf6, 0x5e, 0x1f, 0x3e, 0xbf, 0x5d, 0xf0, 0x97, 0xda, 0xf3, 0xdb, 0xe9,
		0xdf, 0xcf, 0xff, 0xe0, 0xc1, 0xf3, 0xab, 0x99, 0x4f, 0xf6, 0x7e, 0x5f, 0x59, 0x74, 0xcf, 0xea,
		0x82, 0x0b, 0xf6, 0x17, 0x5d, 0xb0, 0xbf, 0xe0, 0x82, 0x85, 0x6f, 0x55, 0x59, 0x70, 0xc1, 0xc1,
		0xf3, 0xcf, 0x99, 0xcf, 0xbf, 0x9a, 0xff, 0xd1, 0xda, 0xf3, 0xf6, 0xcf, 0x45, 0x7f, 0x3b, 0x7c,
		0xfe, 0xf9, 0x76, 0x7b, 0x7b, 0xf7, 0xd5, 0x5e, 0xe5, 0xa6, 0x5c, 0x7a, 0x33, 0x08, 0xe6, 0xed,
		0xdd, 0xcd, 0xc4, 0xf8, 0x06, 0x31, 0x3b, 0xea, 0x38, 0x25, 0x72, 0x86, 0x87, 0x66, 0xeb, 0xef,
		0x52, 0xd3, 0xf9, 0xec, 0x36, 0xed, 0xd2, 0x86, 0xd8, 0x7d, 0x60, 0x0e, 0x30, 0x07, 0x98, 0xc3,
		0xcb, 0x66, 0x0e, 0xe2, 0xee, 0x20, 0xee, 0x12, 0x0e, 0x49, 0xc7, 0x17, 0x1e, 0x9c, 0x74, 0xfc,
		0x8c, 0xec, 0x6e, 0x72, 0x4a, 0x37, 0x20, 0x1d, 0x7f, 0xaf, 0x5c, 0x7d, 0x73, 0x70, 0x48, 0x4a,
		0xbe, 0xf8, 0x68, 0x14, 0x16, 0x4d, 0xa4, 0x9f, 0x14, 0x16, 0x85, 0x6c, 0x42, 0x36, 0x5f, 0x34,
		0xd9, 0xa4, 0xb0, 0x28, 0x0c, 0x13, 0x86, 0xb9, 0xd1, 0x0c, 0x93, 0xc2, 0xa2, 0x90, 0xcb, 0x65,
		0xd3, 0x48, 0x61, 0x51, 0x68, 0x26, 0x34, 0x13, 0x9a, 0x49, 0x61, 0x51, 0x78, 0x26, 0x3c, 0x13,
		0x9e, 0xa9, 0x3b, 0xa5, 0x14, 0x16, 0x85, 0x68, 0x2e, 0x9d, 0x46, 0x0a, 0x8b, 0x42, 0x33, 0xa1,
		0x99, 0xd0, 0x4c, 0x0a, 0x8b, 0x4e, 0x49, 0x82, 0xc2, 0xa2, 0x14, 0x16, 0xcd, 0x96, 0xe6, 0x67,
		0xc4, 0x0d, 0xb3, 0xa2, 0xfd, 0x59, 0x32, 0x45, 0x8b, 0xcb, 0x80, 0x4c, 0x96, 0x03, 0xab, 0x9a,
		0x7a, 0x0a, 0x8b, 0xae, 0x60, 0x54, 0x0a, 0x8b, 0x52, 0x58, 0x74, 0xa9, 0xa0, 0x28, 0x2c, 0xaa,
		0x26, 0x2c, 0x0a, 0x8b, 0x26, 0x49, 0x88, 0xc2, 0xa2, 0x89, 0x22, 0xa2, 0xb0, 0x68, 0xa2, 0x88,
		0x28, 0x2c, 0x9a, 0x24, 0x21, 0x0a, 0x8b, 0x26, 0x02, 0x1b, 0x85, 0x45, 0x13, 0x24, 0x44, 0x61,
		0xd1, 0x44, 0x11, 0x51, 0x58, 0x34, 0x59, 0x44, 0x14, 0x16, 0x65, 0x07, 0x29, 0x0b, 0x55, 0xa7,
		0xb0, 0x28, 0xbb, 0x49, 0xc3, 0xf1, 0xd9, 0x4d, 0x5a, 0x74, 0x03, 0x76, 0x93, 0xc4, 0x82, 0x48,
		0x94, 0x70, 0xa0, 0x84, 0x03, 0x25, 0x1c, 0xd6, 0x99, 0x29, 0xd8, 0xac, 0xde, 0x30, 0x7b, 0x0b,
		0xf8, 0x02, 0x7c, 0x01, 0xbe, 0xf0, 0xb2, 0xf9, 0x02, 0x85, 0x1b, 0xa4, 0x23, 0x0d, 0x1c, 0x77,
		0x5e, 0x3c, 0x3e, 0xc7, 0x9d, 0x57, 0x36, 0xa5, 0x14, 0x6e, 0xd8, 0xf4, 0x80, 0x15, 0x35, 0xff,
		0x17, 0x54, 0x78, 0xaf, 0xed, 0x8a, 0x94, 0x3c, 0x2e, 0xc8, 0x15, 0x7c, 0xaf, 0xdd, 0x0f, 0x59,
		0xee, 0xaa, 0xaa, 0xfe, 0x1b, 0x95, 0xbc, 0x77, 0x42, 0x57, 0xae, 0x1a, 0xb5, 0x44, 0x3b, 0x06,
		0xf1, 0x62, 0xd4, 0x15, 0x8a, 0x51, 0xe7, 0x66, 0x69, 0x41, 0x31, 0x6a, 0xd5, 0xf7, 0xa2, 0x18,
		0x35, 0x91, 0x09, 0x22, 0x13, 0x44, 0x26, 0xd6, 0x3b, 0x32, 0xc1, 0x4e, 0x06, 0x3b, 0x19, 0xec,
		0x64, 0x64, 0xbb, 0x84, 0xa4, 0x18, 0x35, 0xcc, 0x01, 0xe6, 0x00, 0x73, 0x58, 0x6f, 0xe6, 0xc0,
		0x9e, 0x86, 0x74, 0x78, 0x97, 0x3d, 0x8d, 0xc5, 0xe3, 0xb3, 0xa7, 0xb1, 0xb2, 0x29, 0x65, 0x4f,
		0xc3, 0xd2, 0x68, 0x14, 0xa3, 0x4e, 0xa4, 0x9f, 0x14, 0xa3, 0x86, 0x6c, 0x42, 0x36, 0x5f, 0x34,
		0xd9, 0xa4, 0x18, 0x35, 0x0c, 0x13, 0x86, 0xb9, 0xd1, 0x0c, 0x93, 0x62, 0xd4, 0x90, 0xcb, 0x65,
		0xd3, 0x48, 0x31, 0x6a, 0x68, 0x26, 0x34, 0x13, 0x9a, 0x49, 0x31, 0x6a, 0x78, 0x26, 0x3c, 0x13,
		0x9e, 0xa9, 0x3b, 0xa5, 0x14, 0xa3, 0x86, 0x68, 0x2e, 0x9d, 0x46, 0x8a, 0x51, 0x43, 0x33, 0xa1,
		0x99, 0xd0, 0x4c, 0x8a, 0x51, 0x4f, 0x49, 0x82, 0x62, 0xd4, 0x14, 0xa3, 0xce, 0x96, 0xe6, 0x67,
		0xc4, 0x0d, 0xb3, 0xa2, 0xfd, 0x59, 0x32, 0x45, 0x8b, 0xcb, 0x80, 0x4c, 0x96, 0x03, 0xab, 0x9a,
		0x7a, 0x8a, 0x51, 0xaf, 0x60, 0x54, 0x8a, 0x51, 0x53, 0x8c, 0x7a, 0xa9, 0xa0, 0x28, 0x46, 0xad,
		0x26, 0x2c, 0x8a, 0x51, 0x27, 0x49, 0x88, 0x62, 0xd4, 0x89, 0x22, 0xa2, 0x18, 0x75, 0xa2, 0x88,
		0x28, 0x46, 0x9d, 0x24, 0x21, 0x8a, 0x51, 0x27, 0x02, 0x1b, 0xc5, 0xa8, 0x13, 0x24, 0x44, 0x31,
		0xea, 0x44, 0x11, 0x51, 0x8c, 0x3a, 0x59, 0x44, 0x14, 0xa3, 0x66, 0x07, 0x29, 0x0b, 0x55, 0xa7,
		0x18, 0x35, 0xbb, 0x49, 0xc3, 0xf1, 0xd9, 0x4d, 0x5a, 0x74, 0x03, 0x76, 0x93, 0xc4, 0x82, 0x48,
		0x94, 0x70, 0xa0, 0x84, 0x03, 0x25, 0x1c, 0xd6, 0x99, 0x29, 0x50, 0x8c, 0x1a, 0xbe, 0x00, 0x5f,
		0x80, 0x2f, 0x64, 0xc7, 0x17, 0x28, 0xdc, 0x20, 0x1d, 0x69, 0xe0, 0xb8, 0xf3, 0xe2, 0xf1, 0x39,
		0xee, 0xbc, 0xb2, 0x29, 0xa5, 0x70, 0xc3, 0xa6, 0x07, 0xac, 0x28, 0x46, 0xbd, 0xb0, 0x18, 0xb5,
		0x44, 0xc5, 0xe3, 0x82, 0x64, 0x2d, 0xea, 0x4f, 0xfd, 0x07, 0x5a, 0x55, 0x29, 0xea, 0xad, 0x0c,
		0x35, 0x44, 0x4a, 0x33, 0x64, 0x35, 0xa2, 0x68, 0x54, 0x8d, 0x5b, 0x44, 0x07, 0xf4, 0x66, 0x5f,
		0x7d, 0xee, 0x34, 0xe6, 0xad, 0xd8, 0xac, 0x68, 0xcf, 0x55, 0x44, 0x2f, 0x9b, 0x15, 0x4d, 0x21,
		0x1b, 0x96, 0x16, 0x37, 0x5e, 0x40, 0x4a, 0x2c, 0x18, 0xa5, 0x17, 0x88, 0x52, 0x0b, 0x42, 0xf1,
		0x05, 0xa0, 0xf8, 0x82, 0xcf, 0xc2, 0x02, 0x2f, 0x5b, 0x7f, 0x67, 0x5a, 0x0a, 0xbc, 0x58, 0x1f,
		0xe9, 0xaf, 0x50, 0xb9, 0x7f, 0x91, 0x4e, 0x0c, 0xe2, 0xf5, 0xfe, 0xcb, 0xd4, 0xfb, 0xcf, 0x4d,
		0xf4, 0x86, 0x7a, 0xff, 0x59, 0x1b, 0x79, 0x34, 0x50, 0xbc, 0xa6, 0xee, 0xa3, 0x53, 0xb7, 0x5b,
		0xb4, 0xb7, 0x77, 0x03, 0x82, 0xbe, 0x79, 0x73, 0x13, 0xb6, 0xdc, 0x85, 0x75, 0xb7, 0x61, 0xdd,
		0x7d, 0x64, 0xe0, 0x46, 0x64, 0xe3, 0x01, 0xf9, 0x0f, 0xfa, 0x3e, 0x3a, 0x75, 0xe1, 0xf3, 0x22,
		0x85, 0xf5, 0xdb, 0x24, 0x8e, 0xef, 0x62, 0x4e, 0x6f, 0x8e, 0x56, 0x9e, 0xb7, 0x7f, 0x1c, 0x3c,
		0xb3, 0x4d, 0x99, 0x06, 0xad, 0x4a, 0x8f, 0x4e, 0xe7, 0x9b, 0x75, 0xc8, 0x1a, 0xdc, 0x05, 0xdc,
		0x02, 0xb7, 0xc0, 0x2d, 0x70, 0x0b, 0xdc, 0x02, 0xb7, 0x94, 0x25, 0xe7, 0x86, 0x5f, 0xdd, 0x20,
		0x94, 0x54, 0xce, 0x48, 0x31, 0xc7, 0x43, 0x83, 0x50, 0x20, 0x14, 0x08, 0xf5, 0x62, 0x11, 0x2a,
		0x72, 0x04, 0x94, 0x72, 0x11, 0xd4, 0xcf, 0x78, 0x29, 0x97, 0xbd, 0x9a, 0xc5, 0xe4, 0xf8, 0x1a,
		0xb5, 0x5c, 0xc6, 0x0f, 0xbe, 0x89, 0xb5, 0x5c, 0xf6, 0x0e, 0xf6, 0x6b, 0x94, 0x73, 0x49, 0x35,
		0xfb, 0x1b, 0x58, 0xce, 0xa5, 0x76, 0x70, 0xb0, 0x7f, 0x40, 0x41, 0x97, 0xac, 0x47, 0xa5, 0xa0,
		0x0b, 0x05, 0x5d, 0x96, 0x0a, 0xea, 0xf4, 0xfa, 0xb7, 0xd3, 0xab, 0xeb, 0x3f, 0x2f, 0x4f, 0x29,
		0xe7, 0x92, 0x5a, 0x54, 0xf7, 0xc7, 0x57, 0xe4, 0x78, 0xa7, 0x12, 0xd4, 0x87, 0xcb, 0xf3, 0x4f,
		0x48, 0x2a, 0x8d, 0xa4, 0xce, 0xcf, 0xa9, 0xcf, 0x91, 0x4e, 0x52, 0x7f, 0x9c, 0x1f, 0x7f, 0x44,
		0x52, 0x69, 0x24, 0x75, 0x75, 0x71, 0x42, 0xf5, 0xa9, 0x54, 0x92, 0x3a, 0xbb, 0xfc, 0xa3, 0x8a,
		0xa4, 0x52, 0x4a, 0xaa, 0x46, 0xf1, 0x0e, 0x72, 0x21, 0xac, 0x6b, 0xfc, 0x28, 0x5f, 0xd6, 0xca,
		0xa1, 0xac, 0xd8, 0xd8, 0xec, 0x1a, 0x18, 0x4b, 0x93, 0x5d, 0x83, 0xa9, 0x1b, 0xb0, 0x6b, 0x20,
		0x8b, 0x7c, 0xec, 0x6b, 0xb3, 0xaf, 0x9d, 0x73, 0x8c, 0xb2, 0x74, 0x14, 0x6b, 0xfa, 0x06, 0xa0,
		0x15, 0x68, 0x05, 0x5a, 0x81, 0x56, 0xa0, 0xd5, 0x4b, 0x43, 0x2b, 0xb2, 0xcb, 0xe7, 0xe5, 0x12,
		0x37, 0x2b, 0xbb, 0x22, 0xe9, 0x75, 0x05, 0xa1, 0xc4, 0xe2, 0xf3, 0xca, 0xfd, 0x10, 0x0c, 0x57,
		0x95, 0x5b, 0x6e, 0x94, 0x58, 0xed, 0x84, 0xae, 0x5c, 0xde, 0xa3, 0x44, 0xd2, 0xbf, 0x78, 0xda,
		0x63, 0x85, 0xb4, 0xc7, 0xdc, 0x30, 0x10, 0xd2, 0x1e, 0x55, 0xdf, 0x8b, 0xb4, 0x47, 0x16, 0x2e,
		0x2c, 0x5c, 0x58, 0xb8, 0xb0, 0x70, 0x61, 0xe1, 0xf2, 0x82, 0xc2, 0x6c, 0xa4, 0x3d, 0x82, 0x5b,
		0xe0, 0x16, 0xb8, 0x05, 0x6e, 0x81, 0x5b, 0xeb, 0x84, 0x5b, 0xa4, 0x3d, 0x82, 0x50, 0x20, 0x14,
		0x08, 0x45, 0xda, 0xe3, 0x94, 0x1c, 0x48, 0x7b, 0x24, 0xed, 0x71, 0xce, 0x83, 0x93, 0xf6, 0xa8,
		0x75, 0x2b, 0xd2, 0x1e, 0x73, 0x3b, 0xfb, 0xa4, 0x3d, 0xae, 0x64, 0x54, 0xd2, 0x1e, 0x49, 0x7b,
		0x5c, 0x2a, 0x28, 0xd2, 0x1e, 0xd5, 0x45, 0x45, 0xda, 0x63, 0x5a, 0x41, 0x91, 0xf6, 0x98, 0x56,
		0x52, 0xa4, 0x3d, 0xa6, 0x95, 0x14, 0x69, 0x8f, 0x69, 0x25, 0x45, 0xda, 0x63, 0x5a, 0x49, 0x91,
		0xf6, 0xa8, 0x20, 0x29, 0xd2, 0x1e, 0x49, 0x7b, 0xb4, 0xaf, 0xf1, 0xa4, 0x3d, 0xb2, 0x6b, 0xc0,
		0xae, 0xc1, 0x82, 0x1b, 0xb0, 0x6b, 0x20, 0xa5, 0xbb, 0xec, 0x6b, 0xb3, 0xaf, 0x2d, 0x81, 0x51,
		0xa4, 0x3d, 0x82, 0x56, 0xa0, 0x15, 0x68, 0x05, 0x5a, 0x81, 0x56, 0x56, 0xd0, 0x8a, 0xb4, 0xc7,
		0x05, 0x69, 0x8f, 0x79, 0x6a, 0xa9, 0x7b, 0x5e, 0xa1, 0xa1, 0xee, 0x4a, 0xb5, 0x61, 0xc5, 0xed,
		0x74, 0xcf, 0x2b, 0x79, 0x6e, 0xa6, 0xdb, 0x71, 0xff, 0xd3, 0x75, 0xfd, 0xba, 0x5b, 0xf2, 0x1a,
		0xe6, 0x5d, 0x75, 0xe3, 0x83, 0x99, 0xb5, 0xd7, 0x2d, 0x6f, 0x48, 0x7b, 0x5d, 0xa7, 0xde, 0xa4,
		0xb1, 0xae, 0x06, 0x1f, 0xec, 0xc9, 0x6d, 0x4d, 0x3c, 0x9e, 0x31, 0xb3, 0x1b, 0x37, 0xa5, 0x76,
		0x9d, 0x07, 0xb3, 0xc3, 0x09, 0x11, 0x6b, 0x3b, 0x34, 0x18, 0xe3, 0x72, 0xe8, 0x74, 0x77, 0x76,
		0x86, 0xe5, 0x03, 0x76, 0xe3, 0x76, 0x9d, 0x67, 0x5f, 0x66, 0x94, 0xa2, 0x2f, 0x92, 0x9a, 0x2f,
		0xd6, 0x1e, 0xbc, 0x82, 0xff, 0xc2, 0x7f, 0x65, 0xe2, 0xbf, 0x8c, 0x5b, 0x82, 0x37, 0xdc, 0x4e,
		0x3d, 0xf0, 0xda, 0x22, 0x2b, 0x81, 0x78, 0xbe, 0x61, 0x34, 0xa8, 0x4c, 0x95, 0x8c, 0xf2, 0x86,
		0x37, 0x07, 0x37, 0x33, 0x55, 0x5b, 0x21, 0xab, 0xf5, 0xaf, 0x8f, 0x61, 0x64, 0xca, 0xf9, 0x58,
		0xaa, 0x8b, 0x05, 0x9f, 0x62, 0x18, 0x19, 0x78, 0xbe, 0x48, 0x5d, 0xa1, 0x28, 0xce, 0xb4, 0x86,
		0x35, 0x81, 0xfa, 0x11, 0x4b, 0xb7, 0x51, 0x6a, 0xd5, 0x43, 0xb7, 0x7f, 0xb8, 0x58, 0xc8, 0xf9,
		0x4d, 0x8d, 0x8b, 0xff, 0xc3, 0xff, 0xe1, 0xff, 0x72, 0xe5, 0xff, 0xea, 0xad, 0xae, 0x1f, 0xba,
		0x41, 0xad, 0x2a, 0xe8, 0x02, 0x05, 0x22, 0xed, 0xc2, 0xd9, 0x4d, 0x82, 0xbb, 0x15, 0x36, 0xb2,
		0x97, 0x2c, 0xe5, 0xab, 0x44, 0xf9, 0x29, 0xd2, 0xe3, 0x5a, 0xcc, 0x45, 0x11, 0x3c, 0x4e, 0x68,
		0x25, 0xd5, 0xc8, 0xf6, 0x54, 0xed, 0xbd, 0xa9, 0x56, 0x6b, 0x87, 0xd5, 0x6a, 0xf9, 0x70, 0xff,
		0xb0, 0x7c, 0x74, 0x70, 0xb0, 0x57, 0x93, 0xce, 0xc3, 0xb0, 0x3a, 0x7b, 0x39, 0xd9, 0x50, 0xba,
		0x5b, 0x63, 0x0e, 0xd6, 0x76, 0xea, 0xdf, 0xac, 0x90, 0xb0, 0xd1, 0xc0, 0xb0, 0x30, 0x58, 0x18,
		0x2c, 0x0c, 0x16, 0x06, 0x0b, 0x83, 0x85, 0xc1, 0xc2, 0x60, 0x61, 0xb0, 0xb0, 0xd8, 0xb4, 0x48,
		0x1c, 0x23, 0x98, 0x71, 0xef, 0xe6, 0xc7, 0x09, 0x60, 0x5f, 0xb0, 0x2f, 0xd8, 0x97, 0x25, 0xf6,
		0xd5, 0xf5, 0xfc, 0x70, 0xbf, 0x22, 0x48, 0xbd, 0x0e, 0xa1, 0x5e, 0x50, 0x2f, 0xa8, 0x97, 0xd6,
		0x54, 0x55, 0x2b, 0x47, 0xd5, 0xa3, 0xda, 0x61, 0xe5, 0x08, 0xc2, 0xb5, 0x3e, 0x84, 0xeb, 0x65,
		0x9f, 0xcc, 0x35, 0x3d, 0xa4, 0x2d, 0x71, 0x38, 0xd7, 0xe0, 0x64, 0x76, 0x36, 0x67, 0xda, 0xc2,
		0xc0, 0xf1, 0x3b, 0xed, 0x56, 0x10, 0x9a, 0x9f, 0x6b, 0x1b, 0x0f, 0xb5, 0xe2, 0xb3, 0x6d, 0x39,
		0x39, 0x9b, 0x2b, 0x91, 0xf1, 0xf5, 0x72, 0x4f, 0xb8, 0x09, 0x64, 0x6c, 0xad, 0xd9, 0x39, 0xb7,
		0xfa, 0x48, 0x7f, 0x85, 0x96, 0xb7, 0x22, 0xbd, 0xb9, 0xc4, 0x7b, 0x40, 0x95, 0xe9, 0x01, 0xf5,
		0xf2, 0xd6, 0xb7, 0xf4, 0x80, 0x9a, 0x1e, 0x28, 0xde, 0xef, 0xc2, 0x08, 0x7e, 0x17, 0x2a, 0xf5,
		0xcc, 0x1d, 0xc8, 0xe3, 0xce, 0x9b, 0xa3, 0xb0, 0xe5, 0x30, 0xac, 0x3b, 0x0e, 0xeb, 0x0e, 0x24,
		0x03, 0x47, 0x22, 0xbc, 0x4a, 0xcc, 0x7d, 0x1e, 0x77, 0xcf, 0x07, 0x94, 0xfc, 0xee, 0x63, 0x29,
		0xe8, 0x87, 0xb0, 0xa8, 0x55, 0x2e, 0x2a, 0x5d, 0xb1, 0x03, 0xcb, 0x0b, 0xa5, 0xfb, 0xc6, 0xc2,
		0xd8, 0xb6, 0x12, 0xe6, 0xa3, 0x1b, 0xfc, 0xfb, 0x55, 0xed, 0xa6, 0x5c, 0x3a, 0xb8, 0x1b, 0xfd,
		0x67, 0x7f, 0xf0, 0xdd, 0xcf, 0xfe, 0x7f, 0xff, 0x79, 0x53, 0x2e, 0x1d, 0xcd, 0xfb, 0xef, 0xf6,
		0xed, 0xed, 0xce, 0xed, 0xed, 0x8e, 0xde, 0xb5, 0xff, 0x55, 0xa4, 0xa2, 0xb1, 0xb0, 0xcb, 0xf8,
		0xec, 0x06, 0x54, 0xe1, 0xb7, 0x2a, 0xf2, 0xe8, 0xc1, 0x37, 0xb1, 0x0a, 0x7f, 0x99, 0x12, 0xfc,
		0xa9, 0xa6, 0x9e, 0x12, 0xfc, 0xb9, 0x9f, 0x7e, 0x4a, 0xf0, 0xe7, 0x1a, 0xb0, 0x5c, 0xbf, 0xfb,
		0xe8, 0x06, 0x8e, 0x40, 0x56, 0xe7, 0x52, 0x2a, 0x56, 0xb5, 0x30, 0xf6, 0xa9, 0xdf, 0x7d, 0xec,
		0x99, 0x3f, 0x65, 0x5e, 0xad, 0x2b, 0xe3, 0xa8, 0xc2, 0x9d, 0x9d, 0xb8, 0x4b, 0x7c, 0x70, 0x42,
		0x2e, 0x84, 0x5c, 0x08, 0xb9, 0x10, 0x72, 0x21, 0xe4, 0x42, 0xc8, 0x85, 0x90, 0x0b, 0x0c, 0x96,
		0x90, 0x0b, 0x21, 0x17, 0x42, 0x2e, 0x84, 0x5c, 0x08, 0xb9, 0x10, 0x72, 0x21, 0xe4, 0x42, 0xc8,
		0xe5, 0xe5, 0x84, 0x5c, 0xc2, 0x7a, 0xbb, 0xf4, 0xd0, 0x74, 0xbe, 0x74, 0xe4, 0x03, 0x2e, 0xe3,
		0xa1, 0x09, 0xb7, 0x10, 0x6e, 0x21, 0xdc, 0xf2, 0x62, 0xc3, 0x2d, 0x76, 0x1a, 0xf0, 0xda, 0x68,
		0xbc, 0x6b, 0xb7, 0xe1, 0x6e, 0x24, 0x90, 0xeb, 0x93, 0xcb, 0xfb, 0x5f, 0xcf, 0x8f, 0xdf, 0x7f,
		0x2a, 0xda, 0xc8, 0x0a, 0xb2, 0xd3, 0x60, 0xd7, 0x72, 0xef, 0xe1, 0xbe, 0x48, 0xce, 0x2c, 0x34,
		0xf3, 0xb4, 0xb0, 0x4c, 0xc9, 0x40, 0x14, 0xbf, 0x5f, 0xbd, 0x47, 0x14, 0x03, 0x51, 0x5c, 0x7d,
		0xba, 0x46, 0x14, 0x03, 0x51, 0x7c, 0xfa, 0x13, 0x03, 0x19, 0x8a, 0xe2, 0xf2, 0xd3, 0x6f, 0x88,
		0x62, 0x20, 0x8a, 0x53, 0x1b, 0x9d, 0x7d, 0xd7, 0x53, 0x14, 0xc7, 0x27, 0xff, 0x42, 0x14, 0x03,
		0x51, 0x9c, 0xfc, 0xcf, 0x55, 0x31, 0xe7, 0xbd, 0x6e, 0xef, 0x36, 0x94, 0x49, 0x9f, 0x7b, 0x9d,
		0xf0, 0x38, 0x0c, 0x03, 0x59, 0x36, 0xfd, 0xc1, 0xf3, 0x4f, 0x9b, 0x6e, 0x6f, 0x45, 0xd2, 0x23,
		0x78, 0x7e, 0xb7, 0xd9, 0x94, 0x4d, 0x7d, 0xb7, 0x37, 0xf8, 0x45, 0xd0, 0x70, 0x03, 0xb7, 0xf1,
		0xcb, 0xd3, 0x70, 0x68, 0xda, 0x68, 0xe5, 0xb9, 0x8d, 0x56, 0x94, 0x2e, 0xbc, 0x2b, 0x92, 0xa8,
		0x58, 0x10, 0xca, 0xd8, 0xbe, 0x1e, 0x3d, 0xd6, 0xfd, 0x30, 0x6e, 0xb3, 0x8e, 0xd5, 0x92, 0x8c,
		0x1a, 0x95, 0xcc, 0xb8, 0x79, 0x89, 0x6e, 0x67, 0xe2, 0x79, 0xa4, 0x15, 0xf2, 0x48, 0x73, 0x13,
		0x2c, 0x23, 0x8f, 0x54, 0xf5, 0xbd, 0xc8, 0x23, 0x25, 0xca, 0x4e, 0x94, 0xdd, 0xbe, 0x03, 0xc9,
		0xc0, 0x91, 0xe4, 0x73, 0x6d, 0xc0, 0xa1, 0xc6, 0x09, 0x39, 0x70, 0xa8, 0x91, 0x43, 0x8d, 0x1c,
		0x6a, 0x5c, 0x95, 0x52, 0x73, 0xa8, 0x31, 0xcb, 0xf0, 0x5c, 0x81, 0x43, 0x8d, 0x7a, 0xf7, 0xe1,
		0x50, 0x63, 0x6e, 0xa7, 0x9e, 0x43, 0x8d, 0x2b, 0x19, 0x95, 0x43, 0x8d, 0x1c, 0x6a, 0x14, 0x56,
		0x2d, 0xf2, 0x48, 0xd3, 0xae, 0x04, 0xc8, 0x23, 0x25, 0xe4, 0x42, 0xc8, 0x85, 0x90, 0x0b, 0x21,
		0x17, 0x42, 0x2e, 0x84, 0x5c, 0x60, 0xb0, 0x84, 0x5c, 0x08, 0xb9, 0x10, 0x72, 0x21, 0xe4, 0x42,
		0xc8, 0x85, 0x90, 0x0b, 0x21, 0x17, 0x42, 0x2e, 0x2f, 0x32, 0xe4, 0x42, 0x1e, 0x29, 0xe1, 0x16,
		0xc2, 0x2d, 0x84, 0x5b, 0xc8, 0x23, 0x2d, 0x90, 0x47, 0x9a, 0xfd, 0x42, 0x8f, 0x3c, 0xd2, 0xf9,
		0xa2, 0x20, 0x8f, 0x94, 0x3c, 0xd2, 0x59, 0x51, 0x90, 0x47, 0x4a, 0x1e, 0xe9, 0xac, 0x28, 0xc8,
		0x23, 0x25, 0x8f, 0x74, 0x56, 0x14, 0xe4, 0x91, 0xae, 0x8c, 0x49, 0x93, 0x47, 0x3a, 0x39, 0x38,
		0x79, 0xa4, 0xf3, 0x96, 0x97, 0xf9, 0xcf, 0x23, 0x95, 0xc8, 0x53, 0x2c, 0x88, 0xa7, 0x91, 0x1a,
		0xb4, 0x00, 0x36, 0x9f, 0xf9, 0x17, 0xde, 0x02, 0xda, 0xb4, 0x25, 0xb1, 0xb8, 0x36, 0x64, 0xd6,
		0x0a, 0x7a, 0xcb, 0xe2, 0x7c, 0x17, 0xff, 0xe5, 0x3e, 0xf5, 0x0f, 0x4e, 0xb8, 0xff, 0xe9, 0xba,
		0x7e, 0xdd, 0x2d, 0x79, 0x0d, 0x45, 0xf9, 0x9a, 0x41, 0x8e, 0x08, 0xb4, 0x88, 0x40, 0x88, 0x19,
		0x54, 0xa8, 0x8a, 0xdd, 0xd0, 0xbc, 0xc4, 0xcc, 0x4a, 0xc3, 0x98, 0x04, 0x8c, 0x48, 0xcd, 0x74,
		0xd2, 0x1b, 0x40, 0xba, 0x4f, 0xa6, 0x9c, 0x2b, 0xdd, 0x39, 0x32, 0x9c, 0x1b, 0x85, 0x19, 0xd1,
		0x9f, 0x89, 0x74, 0x13, 0x90, 0x2c, 0xce, 0x14, 0xa2, 0x54, 0xed, 0x85, 0xad, 0xd7, 0xf3, 0x5a,
		0xb1, 0x26, 0x81, 0xf2, 0x06, 0x8c, 0xce, 0x06, 0x4b, 0x7c, 0x03, 0xc5, 0xa9, 0x37, 0x55, 0x26,
		0x56, 0x73, 0x6b, 0xc4, 0x78, 0xeb, 0xc3, 0x78, 0x6b, 0x63, 0x7a, 0xeb, 0xa2, 0xf7, 0xde, 0x2b,
		0x32, 0x5f, 0xd5, 0xbc, 0xfc, 0x62, 0xc3, 0xed, 0xd4, 0x03, 0xaf, 0xad, 0xe5, 0x94, 0xe3, 0x29,
		0xf6, 0xd1, 0x20, 0xaa, 0x50, 0xac, 0xb5, 0xc7, 0xa8, 0xbd, 0x97, 0x68, 0xb2, 0x67, 0xa8, 0xaf,
		0xda, 0xa6, 0x2a, 0x2e, 0xa6, 0xea, 0x62, 0x2a, 0x2f, 0xa2, 0xfa, 0xd9, 0x90, 0x3d, 0xed, 0x7d,
		0x36, 0xf3, 0x03, 0xb6, 0xe3, 0x03, 0xb4, 0xb6, 0xb0, 0x5f, 0xc1, 0xbd, 0x0e, 0x11, 0x53, 0xd3,
		0xc4, 0xfb, 0x57, 0x63, 0xdb, 0xd8, 0x36, 0xb6, 0x9d, 0x43, 0xdb, 0x0e, 0x75, 0xe4, 0x30, 0x3e,
		0x38, 0xd4, 0xbb, 0x1a, 0xdb, 0xc6, 0xb6, 0x37, 0xcc, 0xb6, 0xcd, 0xce, 0xc1, 0x98, 0x9c, 0x77,
		0x91, 0x39, 0xd7, 0x12, 0xbd, 0xc8, 0xf1, 0xc9, 0xf9, 0xfd, 0xf5, 0x9f, 0x97, 0xa7, 0xba, 0x5a,
		0x23, 0x70, 0x4c, 0x45, 0xa8, 0x14, 0x5f, 0xef, 0x4d, 0x3e, 0x9c, 0xfd, 0xff, 0xd3, 0x77, 0xc5,
		0x55, 0x14, 0x16, 0x14, 0x7c, 0x89, 0xb3, 0xcb, 0x3f, 0xaa, 0xeb, 0xfe, 0x0e, 0xe7, 0x95, 0x0d,
		0x98, 0x85, 0x5a, 0x31, 0xe3, 0xcd, 0x85, 0x3b, 0xdb, 0x7e, 0x72, 0xf3, 0x23, 0x7f, 0xca, 0x05,
		0x53, 0x55, 0x83, 0x7e, 0x2a, 0xa5, 0x4f, 0x65, 0x02, 0x7e, 0x4a, 0xab, 0x2b, 0x9d, 0x55, 0x95,
		0x22, 0xe3, 0x22, 0xd8, 0xb7, 0xf9, 0xc1, 0x3e, 0x65, 0x86, 0x14, 0xcd, 0x57, 0xd3, 0x75, 0x1e,
		0xd4, 0x58, 0x51, 0xc4, 0x86, 0x0e, 0x15, 0xae, 0xb9, 0x1c, 0x3a, 0x85, 0x9d, 0x9d, 0xa1, 0xc9,
		0xef, 0xf6, 0x15, 0x3e, 0x43, 0xb3, 0x54, 0xab, 0x24, 0xac, 0x55, 0x31, 0x58, 0x3b, 0x0a, 0x5f,
		0xc1, 0x30, 0x37, 0xd4, 0x30, 0x89, 0xc2, 0xb3, 0x9a, 0x67, 0x35, 0x4f, 0xa4, 0xce, 0x94, 0x27,
		0x9a, 0xf0, 0x45, 0x6c, 0x1b, 0xdb, 0xc6, 0xb6, 0x33, 0xb5, 0x6d, 0xa2, 0xf0, 0xd8, 0x36, 0xb6,
		0x3d, 0x3d, 0xdf, 0x44, 0xe1, 0x87, 0xe3, 0x10, 0x85, 0xb7, 0x11, 0xff, 0x25, 0x0a, 0x9f, 0x87,
		0x59, 0x20, 0x0a, 0x2f, 0x14, 0x3a, 0xc8, 0x30, 0x0a, 0xaf, 0x9a, 0x6e, 0xa2, 0x1a, 0x84, 0x57,
		0x48, 0x1c, 0x91, 0x09, 0xf6, 0x29, 0xf1, 0x2f, 0x1d, 0xde, 0x45, 0x0c, 0x9e, 0x50, 0x9f, 0x29,
		0x3f, 0x5a, 0x7d, 0x0c, 0xbe, 0xaf, 0xf0, 0x52, 0x66, 0xb9, 0x65, 0x20, 0xc4, 0x51, 0x1e, 0x4e,
		0xcf, 0xa3, 0x14, 0x52, 0x98, 0xa1, 0x5a, 0xd6, 0x8d, 0x56, 0x96, 0x8d, 0x56, 0x56, 0x8d, 0x5a,
		0x16, 0x4d, 0x92, 0x50, 0x14, 0x11, 0x40, 0xc3, 0xf3, 0x17, 0x53, 0x6d, 0x9c, 0xa8, 0xf8, 0xfa,
		0xe5, 0xea, 0xb4, 0x58, 0x49, 0xe6, 0xff, 0x65, 0x81, 0x84, 0xd2, 0x4a, 0x46, 0x41, 0x22, 0x4b,
		0x24, 0x91, 0x56, 0x02, 0xf3, 0x5f, 0x7d, 0xf6, 0xc5, 0xe6, 0xbc, 0x54, 0x52, 0x96, 0x48, 0xba,
		0xac, 0x90, 0x84, 0xfd, 0xa7, 0x44, 0x10, 0x4a, 0x03, 0x3a, 0xe9, 0x41, 0x26, 0x2d, 0xa8, 0x28,
		0x83, 0x88, 0x32, 0x68, 0x28, 0x81, 0xc4, 0xaa, 0x14, 0x31, 0xf1, 0x24, 0x44, 0xa2, 0x1a, 0x2e,
		0x3b, 0xea, 0x90, 0x4e, 0x0b, 0x3d, 0x3f, 0x74, 0x83, 0x07, 0xa7, 0xee, 0x76, 0x92, 0x35, 0x31,
		0xf6, 0x59, 0xb4, 0x31, 0x27, 0xda, 0x98, 0xb4, 0xdb, 0x38, 0x9e, 0xb4, 0x64, 0x39, 0xcc, 0xcc,
		0x73, 0x92, 0x1c, 0xd2, 0x6d, 0x7e, 0xa7, 0x66, 0xc2, 0x2a, 0x0c, 0x58, 0x9d, 0xf9, 0xaa, 0x32,
		0x5e, 0x6d, 0xa6, 0xab, 0xcd, 0x70, 0xb5, 0x98, 0xad, 0x19, 0x09, 0x4b, 0xbb, 0x59, 0x4d, 0x4e,
		0x23, 0x4b, 0xac, 0x95, 0x2c, 0xb1, 0x94, 0x4f, 0x53, 0x78, 0x0d, 0xfd, 0x5d, 0x18, 0xf5, 0x52,
		0x00, 0xec, 0xc1, 0x64, 0xa9, 0xd8, 0x62, 0x0a, 0x2e, 0xa2, 0xe8, 0x9a, 0xb1, 0xc5, 0xec, 0xf7,
		0x60, 0x46, 0x70, 0xae, 0x5e, 0xea, 0xa2, 0x90, 0xc9, 0x2e, 0xeb, 0x9a, 0xc4, 0x50, 0xc7, 0xf4,
		0x77, 0xfc, 0xad, 0x85, 0xd3, 0xcc, 0x67, 0xd1, 0x6d, 0xc6, 0xdf, 0xae, 0xe0, 0x4c, 0xb3, 0xfb,
		0x25, 0x70, 0x3b, 0x9d, 0x52, 0xb4, 0x58, 0x56, 0x46, 0xfe, 0xe9, 0x01, 0xa0, 0x00, 0x50, 0x80,
		0x6c, 0x28, 0xc0, 0xa4, 0xe6, 0xe9, 0xd3, 0x81, 0xa9, 0x71, 0xf4, 0xa8, 0xc1, 0x1e, 0xd4, 0x00,
		0x6a, 0x60, 0x87, 0x1a, 0xa8, 0x1a, 0x46, 0x74, 0x61, 0xbc, 0xf8, 0x8e, 0xf1, 0xc9, 0x08, 0xbd,
		0x4a, 0x3e, 0x02, 0xa6, 0x32, 0x6b, 0x32, 0x15, 0xcd, 0x01, 0x04, 0x7a, 0x09, 0x98, 0x9b, 0x90,
		0x94, 0x29, 0x89, 0x9b, 0x94, 0xb8, 0x69, 0x89, 0x9a, 0x98, 0x9e, 0xa9, 0x69, 0x9a, 0x9c, 0xb1,
		0xe9, 0xcd, 0x98, 0xe0, 0x93, 0xf9, 0x3c, 0x4f, 0x1b, 0xe2, 0x93, 0xe9, 0x3c, 0x9b, 0x99, 0xa3,
		0x31, 0x92, 0xd9, 0x30, 0x4f, 0x79, 0x33, 0x95, 0x36, 0x57, 0x6b, 0x66, 0x6b, 0xcd, 0x7c, 0xad,
		0x98, 0xb1, 0x99, 0x39, 0x1b, 0x9a, 0xb5, 0x98, 0x79, 0x8f, 0x17, 0x7b, 0xb1, 0x2a, 0x93, 0xf2,
		0x4d, 0x96, 0xb5, 0x4b, 0x58, 0x0a, 0xc7, 0xb3, 0xac, 0xbb, 0x00, 0x1b, 0xae, 0xc0, 0x9e, 0x4b,
		0xb0, 0xe5, 0x1a, 0xac, 0xbb, 0x08, 0xeb, 0xae, 0xc2, 0xaa, 0xcb, 0x90, 0x71, 0x1d, 0x42, 0x2e,
		0xc4, 0x3c, 0x7e, 0x97, 0xa8, 0xaf, 0xea, 0x67, 0x88, 0x52, 0x23, 0xff, 0xa1, 0xe0, 0x98, 0xb1,
		0x33, 0x48, 0xfd, 0x43, 0x87, 0xbb, 0x71, 0xb7, 0xb5, 0x49, 0xfd, 0xf4, 0x95, 0xb2, 0x8d, 0xd3,
		0x3b, 0x79, 0xa1, 0xba, 0xe0, 0x82, 0xcc, 0x4e, 0x6c, 0xe1, 0x85, 0x7b, 0xc7, 0xbd, 0xaf, 0xb9,
		0x7b, 0x97, 0x62, 0x8a, 0xd1, 0x80, 0xfd, 0xb6, 0x77, 0x6e, 0xa3, 0xd4, 0xaa, 0x87, 0x2a, 0x61,
		0x77, 0x65, 0x73, 0x98, 0xba, 0x8f, 0xb0, 0x02, 0xd8, 0x69, 0xf7, 0x2b, 0xce, 0x27, 0x6d, 0x3a,
		0x1e, 0xfb, 0x0e, 0xc8, 0xb6, 0x23, 0xca, 0xcc, 0x21, 0x65, 0xe6, 0x98, 0x32, 0x71, 0x50, 0xb2,
		0x8e, 0x4a, 0xd8, 0x61, 0xd9, 0xe3, 0xa5, 0x33, 0xfa, 0x5e, 0x6f, 0x75, 0xfd, 0xd0, 0x0d, 0x6a,
		0x55, 0x8b, 0x2d, 0x91, 0xdf, 0xd0, 0xc3, 0x7f, 0xfc, 0xe0, 0xf4, 0xf0, 0x57, 0xbf, 0x0f, 0x3d,
		0xfc, 0x73, 0x3b, 0xf5, 0x7b, 0x6f, 0xaa, 0xd5, 0xda, 0x61, 0xb5, 0x5a, 0x3e, 0xdc, 0x3f, 0x2c,
		0x1f, 0x1d, 0x1c, 0xec, 0xd5, 0xf6, 0x68, 0xe9, 0x9f, 0xf9, 0xa8, 0x77, 0x39, 0xed, 0x0b, 0x2f,
		0x68, 0x4d, 0x11, 0x17, 0x6e, 0x3b, 0xf5, 0x6f, 0x99, 0x90, 0xee, 0xd1, 0x8d, 0x60, 0xdd, 0xb0,
		0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd, 0xb0, 0xee,
		0x17, 0xc3, 0xba, 0x6d, 0x9c, 0x8d, 0x98, 0x81, 0x43, 0xf9, 0x33, 0x12, 0xb0, 0x6d, 0xd8, 0x36,
		0x6c, 0x1b, 0xb6, 0x6d, 0xe9, 0x0c, 0xc6, 0xb4, 0x7b, 0x91, 0x3c, 0x8b, 0x31, 0x76, 0x05, 0xa3,
		0x34, 0xa7, 0x79, 0x15, 0x42, 0x6e, 0x7c, 0xe7, 0xd1, 0xfd, 0xef, 0x7a, 0x37, 0x08, 0x5c, 0x3f,
		0x7c, 0xb5, 0xbd, 0xbb, 0xb3, 0x33, 0xfe, 0x5f, 0xc7, 0x0d, 0x4b, 0xbd, 0x3f, 0xdf, 0xdd, 0x84,
		0x4f, 0xed, 0x45, 0x1f, 0xea, 0xfd, 0xe9, 0x6e, 0x41, 0x53, 0x6b, 0xf1, 0xc3, 0x1f, 0x16, 0x30,
		0x2e, 0x57, 0x1b, 0xcc, 0xc2, 0xad, 0xeb, 0xc7, 0xe8, 0xab, 0x97, 0xef, 0x36, 0x95, 0xd5, 0x35,
		0xf5, 0xf3, 0xa2, 0x49, 0x17, 0x3c, 0xc3, 0x52, 0xd0, 0xce, 0xa1, 0x3b, 0xed, 0x3f, 0xea, 0xa8,
		0x76, 0x4d, 0xfc, 0xa7, 0xb9, 0x6d, 0xcf, 0x05, 0x5a, 0xdf, 0xcb, 0x69, 0xd4, 0x6a, 0x8f, 0xc3,
		0x1a, 0xb7, 0x4c, 0x9f, 0x19, 0xd1, 0xa8, 0x85, 0xfa, 0xbc, 0x25, 0xb8, 0x71, 0x37, 0xf4, 0x79,
		0x8b, 0x3b, 0xf9, 0x41, 0x8d, 0x5a, 0xae, 0x4b, 0x4f, 0xab, 0xb0, 0x6b, 0xc9, 0xd2, 0xa5, 0x14,
		0x45, 0x0e, 0xec, 0x59, 0x77, 0x22, 0x66, 0xee, 0xe3, 0x79, 0x4d, 0x92, 0x61, 0x84, 0xf4, 0xc8,
		0xbe, 0xfe, 0x98, 0x64, 0x65, 0xd9, 0xd3, 0x16, 0x3d, 0x25, 0x51, 0x9f, 0x62, 0x8d, 0xe9, 0x55,
		0x2d, 0xfb, 0xb2, 0x90, 0x27, 0x2b, 0xa7, 0xc9, 0xcf, 0xa5, 0xc2, 0xa6, 0xf9, 0x81, 0x65, 0xf2,
		0x03, 0x2d, 0xae, 0x78, 0xc9, 0x0f, 0x1c, 0x3f, 0xb9, 0x71, 0x7e, 0xe0, 0x68, 0xa1, 0x25, 0x97,
		0x1e, 0x18, 0x8d, 0x28, 0x93, 0x1d, 0x58, 0x26, 0x3b, 0x70, 0x05, 0x61, 0x2b, 0xb2, 0x03, 0x73,
		0xb0, 0x1c, 0x12, 0x0b, 0x2b, 0x59, 0x08, 0x23, 0x49, 0x86, 0x8d, 0xe2, 0xa9, 0x3b, 0x53, 0xff,
		0x5b, 0xd0, 0xd5, 0x53, 0xa1, 0xc5, 0x9f, 0x05, 0xd2, 0x6b, 0x80, 0xa9, 0xa1, 0xc4, 0x94, 0x9a,
		0x74, 0x73, 0xc1, 0xcd, 0xe2, 0x66, 0x71, 0xb3, 0xb8, 0xd9, 0xe5, 0x6e, 0x76, 0x4e, 0x68, 0x3e,
		0x8a, 0xc8, 0xab, 0x57, 0x78, 0x27, 0xee, 0x60, 0x33, 0xee, 0x60, 0xb4, 0xe4, 0xb5, 0x12, 0x72,
		0x50, 0x29, 0x22, 0xb7, 0x9a, 0x70, 0x83, 0xf1, 0xaa, 0x47, 0x6a, 0xb5, 0x63, 0x08, 0xbf, 0x84,
		0x1c, 0x08, 0x39, 0x64, 0xed, 0x0d, 0x8d, 0xe1, 0x52, 0x10, 0x26, 0x25, 0xe0, 0x71, 0x4e, 0xf3,
		0x92, 0xc8, 0xa8, 0xf3, 0xec, 0xc2, 0x8c, 0xca, 0x00, 0x88, 0xa4, 0xfd, 0x53, 0x4f, 0x0d, 0xe7,
		0x45, 0xbc, 0x94, 0x78, 0x29, 0x0b, 0x79, 0x16, 0xf2, 0x2c, 0xe4, 0x89, 0x97, 0x12, 0x2f, 0xc5,
		0xcd, 0xe2, 0x66, 0x71, 0xb3, 0xc4, 0x4b, 0x89, 0x97, 0xe6, 0x37, 0x5e, 0x6a, 0x7a, 0x48, 0x58,
		0x3c, 0x5c, 0x6a, 0x70, 0x00, 0x38, 0x9b, 0x50, 0x83, 0x11, 0x08, 0x4b, 0x80, 0x2f, 0x51, 0x52,
		0x02, 0x0d, 0x44, 0x49, 0xf3, 0x16, 0x25, 0xd5, 0x07, 0xb4, 0xe7, 0x9c, 0x35, 0xb8, 0x88, 0xf2,
		0x0e, 0x06, 0x90, 0x5d, 0xd0, 0x70, 0x55, 0x66, 0x99, 0x06, 0x22, 0x99, 0x05, 0x22, 0x99, 0x04,
		0x66, 0x99, 0x03, 0xaa, 0x82, 0x37, 0x64, 0x0a, 0x76, 0x18, 0x42, 0x51, 0x2b, 0x1a, 0x2f, 0xca,
		0x09, 0x8a, 0xb4, 0x40, 0x4b, 0x9c, 0x35, 0xeb, 0xbd, 0xd0, 0x26, 0xa6, 0x27, 0xcb, 0x96, 0x68,
		0x0a, 0x79, 0xea, 0xea, 0x2d, 0x25, 0x15, 0xb9, 0x14, 0x8d, 0xcf, 0x2c, 0x71, 0x9d, 0x1c, 0x35,
		0x3e, 0x53, 0xe6, 0x2a, 0x06, 0xdc, 0x44, 0x87, 0x8b, 0xcc, 0xe1, 0x1e, 0x69, 0xb3, 0x7a, 0x85,
		0x0c, 0xd2, 0x37, 0x6d, 0x52, 0x38, 0x33, 0x02, 0x5d, 0x0a, 0x31, 0x56, 0x2d, 0x63, 0x55, 0x6f,
		0x54, 0xec, 0x0b, 0xb5, 0x29, 0x9c, 0x1e, 0x88, 0x3e, 0x85, 0xf6, 0xd6, 0xe8, 0xf4, 0x29, 0xa4,
		0x4f, 0x21, 0xe7, 0x6a, 0x08, 0x77, 0xd1, 0xa7, 0xd0, 0xdc, 0x10, 0xe9, 0x53, 0x98, 0x85, 0x99,
		0x4a, 0x9b, 0xab, 0x35, 0xb3, 0xb5, 0x66, 0xbe, 0x56, 0xcc, 0xd8, 0xcc, 0x9c, 0x0d, 0xcd, 0x5a,
		0xcc, 0xbc, 0xc7, 0x81, 0x18, 0xfa, 0x14, 0xd2, 0xa7, 0x90, 0x46, 0x56, 0x99, 0xb8, 0x0c, 0x19,
		0xd7, 0x21, 0xe4, 0x42, 0xf4, 0x83, 0x4d, 0x16, 0x83, 0x51, 0x36, 0x82, 0x55, 0x2a, 0xc1, 0x2c,
		0xfa, 0x14, 0x6a, 0x38, 0x79, 0xfa, 0x14, 0xe2, 0xde, 0x71, 0xef, 0x79, 0x75, 0xef, 0xf4, 0x29,
		0xcc, 0x80, 0x47, 0x5a, 0xe3, 0x93, 0x36, 0x1d, 0x8f, 0x7d, 0x07, 0x64, 0xdb, 0x11, 0x65, 0xe6,
		0x90, 0x32, 0x73, 0x4c, 0x99, 0x38, 0x28, 0x59, 0x47, 0x25, 0xec, 0xb0, 0xec, 0xf1, 0xd2, 0x19,
		0x7d, 0xa7, 0x63, 0xca, 0xbc, 0x7f, 0x74, 0x4c, 0x49, 0x75, 0x1b, 0x3a, 0xa6, 0xa8, 0x4d, 0x3d,
		0x1d, 0x53, 0xd6, 0x4d, 0x1b, 0xe8, 0x98, 0x92, 0x17, 0x6b, 0xa2, 0x4f, 0x21, 0xac, 0x1b, 0xd6,
		0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x6d,
		0x9d, 0x75, 0xd3, 0xa7, 0x10, 0xb6, 0x0d, 0xdb, 0x86, 0x6d, 0xaf, 0x33, 0xdb, 0xa6, 0x4f, 0x21,
		0x7d, 0x0a, 0xad, 0xea, 0x72, 0xde, 0xfa, 0x14, 0x4e, 0x27, 0x76, 0x4d, 0xff, 0x22, 0xd7, 0x9d,
		0x0a, 0xcf, 0xfc, 0x89, 0x0c, 0xe4, 0x89, 0x1f, 0xe9, 0x55, 0x98, 0x88, 0x8f, 0xf4, 0x2a, 0xa4,
		0x57, 0x61, 0xae, 0xdc, 0xca, 0xca, 0xba, 0x15, 0xaa, 0x3a, 0x12, 0xea, 0x60, 0xe5, 0x4c, 0x87,
		0x32, 0xaf, 0x87, 0x95, 0x52, 0x63, 0xe8, 0x59, 0x98, 0x96, 0x16, 0x53, 0x1a, 0x8b, 0x5c, 0xc1,
		0xf5, 0x70, 0x8b, 0xd4, 0xe0, 0xce, 0x2a, 0xe4, 0x45, 0xa6, 0x20, 0x99, 0x82, 0x19, 0xf3, 0x67,
		0x8a, 0xc3, 0x52, 0x83, 0x7b, 0xe9, 0x74, 0x52, 0x83, 0x1b, 0x37, 0x8b, 0x9b, 0xc5, 0xcd, 0x8a,
		0xbb, 0x59, 0x6a, 0x70, 0xaf, 0x53, 0xec, 0x61, 0x45, 0x5d, 0x0b, 0x97, 0x86, 0x1d, 0xe8, 0x5b,
		0x98, 0x15, 0x04, 0x13, 0x76, 0x20, 0xec, 0x40, 0x45, 0x6e, 0xfa, 0x16, 0x1a, 0xf8, 0x2f, 0xfa,
		0x16, 0xe2, 0xbc, 0x88, 0x99, 0x12, 0x33, 0x65, 0x31, 0xcf, 0x62, 0x9e, 0xc5, 0x3c, 0x31, 0x53,
		0x62, 0xa6, 0xb8, 0x59, 0xdc, 0x2c, 0x6e, 0x16, 0x37, 0x4b, 0xcc, 0x74, 0x43, 0x63, 0xa6, 0xab,
		0xe9, 0x5c, 0xb8, 0x34, 0x64, 0x4a, 0xef, 0x42, 0x22, 0xa5, 0x04, 0x1b, 0x88, 0x94, 0xae, 0x5b,
		0xa4, 0x94, 0xde, 0x85, 0xf1, 0x31, 0xe8, 0x5d, 0xb8, 0x3e, 0xbd, 0x0b, 0x93, 0x58, 0x42, 0x66,
		0xdd, 0x0b, 0x97, 0xf1, 0x02, 0xfa, 0x17, 0xa6, 0x98, 0x39, 0xeb, 0x0d, 0x0c, 0x27, 0x67, 0x28,
		0xdb, 0x86, 0x69, 0xc3, 0x67, 0x28, 0xf5, 0xbc, 0xbf, 0x46, 0xb7, 0xb4, 0xf8, 0xe5, 0x9b, 0xd1,
		0x2a, 0xcd, 0x7b, 0x78, 0x91, 0x9d, 0xd2, 0xbc, 0x87, 0xb5, 0x69, 0x94, 0xa6, 0x99, 0xcf, 0x61,
		0x96, 0xc7, 0xb1, 0xae, 0x6d, 0xd1, 0xbc, 0x07, 0xba, 0xa2, 0x19, 0xaa, 0x7b, 0x36, 0xfc, 0x50,
		0xbb, 0x29, 0x5a, 0xe4, 0x84, 0xcd, 0x97, 0xcf, 0xe3, 0xa1, 0x58, 0x43, 0x6b, 0x1b, 0x0f, 0x4b,
		0x68, 0x1d, 0xe3, 0x62, 0x05, 0x2d, 0xba, 0x82, 0xde, 0xed, 0x4f, 0xc3, 0xdb, 0x18, 0xbf, 0x9d,
		0xfa, 0xc5, 0xf0, 0xe7, 0xdc, 0x9f, 0x42, 0xea, 0x7e, 0x16, 0xf4, 0x6f, 0x13, 0xa3, 0xe1, 0xe2,
		0x70, 0x71, 0xb8, 0xb8, 0x0d, 0x76, 0x71, 0x37, 0x63, 0x17, 0x37, 0xb9, 0x75, 0x16, 0x7d, 0xe2,
		0x6e, 0x78, 0x49, 0xdc, 0x2f, 0x74, 0xe6, 0xfc, 0x2e, 0x1a, 0xb9, 0xe1, 0x7e, 0xdf, 0x8c, 0x68,
		0xe4, 0xca, 0x82, 0x62, 0xb1, 0x80, 0x81, 0x7e, 0x6e, 0x81, 0x6e, 0x98, 0x65, 0xf8, 0xdd, 0x95,
		0xfb, 0xa0, 0x95, 0x43, 0xa0, 0x10, 0xff, 0x52, 0x0a, 0x19, 0xe9, 0x1c, 0xb4, 0x35, 0x3a, 0x60,
		0x6b, 0xbc, 0x98, 0xad, 0xb0, 0x98, 0x65, 0x31, 0xcb, 0x62, 0x16, 0xa6, 0x07, 0xd3, 0x83, 0xe9,
		0xb1, 0x98, 0x65, 0x31, 0x8b, 0x8b, 0xc3, 0xc5, 0xe1, 0xe2, 0x58, 0xcc, 0xbe, 0xdc, 0xc5, 0xac,
		0xee, 0xa1, 0x4f, 0x81, 0xb5, 0xac, 0xc6, 0xe1, 0xce, 0x17, 0x73, 0x94, 0x43, 0xfd, 0x80, 0x82,
		0xcc, 0xa4, 0x64, 0x79, 0x8a, 0x43, 0x2d, 0x82, 0xa0, 0x15, 0x39, 0xd0, 0x3e, 0xb5, 0x51, 0xc9,
		0xe6, 0xd4, 0x86, 0xda, 0x69, 0xd7, 0xcd, 0x39, 0xb6, 0xa1, 0x74, 0x5a, 0x75, 0xc5, 0xe7, 0x36,
		0x34, 0xda, 0x65, 0x8c, 0x17, 0xf3, 0x0d, 0xcd, 0x10, 0x57, 0x79, 0xcd, 0xce, 0x6b, 0xe8, 0x1d,
		0xdb, 0xde, 0xfc, 0x18, 0x97, 0xd6, 0xb1, 0x6c, 0xbb, 0xb4, 0x43, 0x9b, 0x8c, 0xce, 0x39, 0x3f,
		0xa7, 0x55, 0x95, 0x3c, 0x72, 0xca, 0x6f, 0xc0, 0xfe, 0x59, 0xec, 0x57, 0x25, 0x64, 0x7a, 0x98,
		0xaf, 0xc0, 0xbd, 0x52, 0x80, 0xfd, 0x96, 0x81, 0x9c, 0x47, 0x27, 0xcc, 0x13, 0x55, 0x49, 0xed,
		0x18, 0xb9, 0xd6, 0xb1, 0x71, 0xad, 0x63, 0xe2, 0x6a, 0xc7, 0xc2, 0x93, 0xa4, 0xa1, 0xa8, 0x6d,
		0x9a, 0x5a, 0x56, 0x4c, 0x45, 0xcf, 0xd4, 0xf5, 0x6a, 0xb9, 0x46, 0x2d, 0xd6, 0x93, 0xf9, 0x7f,
		0x59, 0x20, 0xab, 0xb4, 0x32, 0x52, 0x92, 0xcd, 0x12, 0x89, 0x28, 0x48, 0x62, 0xfe, 0xfb, 0xcf,
		0xbe, 0xdd, 0x9c, 0x37, 0x4b, 0xa0, 0xc3, 0xa9, 0xe8, 0x6f, 0x02, 0xdd, 0x4d, 0xa4, 0xb7, 0x69,
		0xd8, 0x40, 0x7a, 0xd4, 0x4f, 0x8b, 0xee, 0xca, 0x28, 0xae, 0x8c, 0xd6, 0x4a, 0xa8, 0xac, 0xa6,
		0x8b, 0x49, 0x74, 0x72, 0xd4, 0x20, 0xb4, 0x54, 0x77, 0xda, 0xce, 0x67, 0xaf, 0xe9, 0x85, 0x4f,
		0xc9, 0x02, 0x99, 0x6a, 0x2e, 0x1a, 0xbf, 0x36, 0xc9, 0x99, 0xa6, 0xa2, 0x8f, 0xa9, 0xe9, 0xa2,
		0x0a, 0x3d, 0x54, 0xa7, 0x83, 0xaa, 0xf4, 0x4f, 0x9b, 0xee, 0x69, 0xd3, 0x3b, 0x2d, 0x3a, 0x67,
		0x06, 0x87, 0xa9, 0xe9, 0x59, 0x6c, 0x91, 0xe1, 0xfa, 0xa1, 0x17, 0x3e, 0xa5, 0x8b, 0x15, 0x44,
		0x3e, 0x22, 0x45, 0x9b, 0xc9, 0xe2, 0xd9, 0x70, 0xe8, 0x5f, 0x9c, 0x8e, 0xc6, 0x4a, 0xfd, 0xf8,
		0xe4, 0xfc, 0xfe, 0xe4, 0xe2, 0xf7, 0x8f, 0xd7, 0xa7, 0x57, 0xf7, 0x27, 0xc7, 0x97, 0xc7, 0xbf,
		0x9c, 0x9d, 0x9f, 0x5d, 0xff, 0x99, 0x76, 0xce, 0xfa, 0x1d, 0x32, 0x3b, 0x4a, 0x2d, 0x6a, 0x35,
		0x57, 0x69, 0x67, 0xbd, 0x27, 0xfc, 0xf5, 0xf8, 0xe4, 0xf4, 0xfe, 0xe2, 0xe3, 0xf9, 0x9f, 0x45,
		0x1b, 0xc7, 0x25, 0x34, 0x9f, 0xec, 0xf8, 0xfd, 0xfb, 0xab, 0xd3, 0xf7, 0xc7, 0xd7, 0xf9, 0x7b,
		0xb2, 0xb1, 0xcc, 0xa2, 0x67, 0x94, 0x5e, 0xd1, 0xdf, 0x99, 0x5a, 0x5a, 0xee, 0xe8, 0x46, 0x12,
		0xb7, 0x4f, 0x64, 0x1a, 0x4b, 0x68, 0xfb, 0x1c, 0x92, 0xb1, 0xb5, 0xe4, 0xed, 0x92, 0xde, 0x2a,
		0xf9, 0x6d, 0x8a, 0x73, 0x39, 0xcc, 0xd2, 0xe7, 0x9f, 0x7c, 0xf2, 0xf1, 0xf3, 0xc5, 0x9e, 0xad,
		0x18, 0xa3, 0x64, 0xd3, 0xcf, 0x35, 0xbb, 0x00, 0x9d, 0xa6, 0x6d, 0x0b, 0x08, 0xd0, 0x42, 0xbc,
		0x5b, 0x86, 0x6f, 0x89, 0x3b, 0x74, 0x49, 0xf0, 0x95, 0x1a, 0xae, 0x52, 0xc3, 0x53, 0x9a, 0x1d,
		0xb0, 0xe5, 0xb3, 0xbe, 0x88, 0xae, 0xa4, 0x38, 0xc1, 0x92, 0xfa, 0x84, 0x4a, 0x6a, 0x16, 0x5a,
		0x96, 0x61, 0xa1, 0x4b, 0xb7, 0x4f, 0xf3, 0x4b, 0x42, 0x97, 0x6d, 0x5f, 0x8a, 0x73, 0xd0, 0x54,
		0xa9, 0x67, 0x6a, 0xa9, 0x66, 0x29, 0x63, 0xeb, 0xd6, 0xb9, 0x66, 0xaa, 0xdd, 0xf3, 0xf5, 0xa3,
		0x9a, 0x69, 0x76, 0xb7, 0xcd, 0x98, 0x66, 0xda, 0x48, 0x78, 0xb1, 0xe1, 0x76, 0xea, 0x81, 0xd7,
		0x56, 0x0a, 0x81, 0x45, 0x33, 0x14, 0xbf, 0x58, 0x6d, 0xd3, 0xa6, 0x4c, 0xaa, 0x2d, 0xa9, 0xb6,
		0x5a, 0x11, 0xeb, 0x58, 0xb0, 0x24, 0xf0, 0x7c, 0x95, 0xa3, 0xda, 0x8a, 0xb1, 0x69, 0x99, 0x8d,
		0x50, 0xd7, 0x77, 0x3e, 0x37, 0xdd, 0x86, 0xba, 0x6d, 0x8d, 0x2e, 0x4c, 0xbb, 0xf5, 0xe5, 0x3e,
		0x38, 0xdd, 0x66, 0x7f, 0x3e, 0x7b, 0xea, 0x80, 0x39, 0x62, 0x8e, 0xd9, 0x9a, 0xe3, 0xe7, 0x56,
		0xab, 0xe9, 0x3a, 0xbe, 0x8e, 0x3d, 0xee, 0x65, 0x68, 0x8f, 0x8f, 0x61, 0x57, 0xdd, 0x16, 0x7b,
		0x17, 0x61, 0x50, 0x18, 0x54, 0xa6, 0x06, 0xd5, 0xf5, 0xfc, 0x70, 0xaf, 0xa6, 0x61, 0x4f, 0x35,
		0x85, 0x4b, 0xae, 0x1c, 0xff, 0x8b, 0xab, 0x14, 0x87, 0x53, 0x8f, 0x2b, 0x15, 0x86, 0x5b, 0x76,
		0x06, 0x47, 0x01, 0xcc, 0xce, 0x04, 0xf7, 0xa3, 0x8d, 0x06, 0xd7, 0xff, 0x1a, 0x38, 0xf5, 0x1e,
		0xc7, 0x7d, 0xe7, 0x7d, 0xf1, 0xfa, 0x9b, 0x87, 0xe5, 0x4c, 0xce, 0x66, 0x7f, 0x70, 0xbe, 0xaf,
		0x5c, 0x64, 0xb5, 0x83, 0x83, 0xfd, 0x83, 0x15, 0x8a, 0xcd, 0xd2, 0x29, 0x82, 0xbb, 0x0c, 0x11,
		0x47, 0xa9, 0x74, 0x7e, 0x64, 0xfd, 0x0a, 0xe5, 0xf1, 0xc1, 0x1c, 0x30, 0xe7, 0x45, 0xad, 0xa9,
		0x94, 0x0a, 0xb3, 0xea, 0x14, 0x62, 0xc5, 0xa2, 0xb0, 0x28, 0x21, 0x8b, 0x52, 0xdb, 0xc0, 0x9d,
		0x31, 0x2b, 0x05, 0xec, 0xd5, 0xdb, 0xd0, 0x9d, 0x7d, 0xe0, 0xe8, 0x00, 0xa0, 0x5a, 0xa1, 0xd3,
		0xe7, 0x5c, 0x1c, 0x38, 0x93, 0x3b, 0x62, 0x35, 0xef, 0x68, 0x55, 0xfc, 0x2c, 0x5f, 0xea, 0x4a,
		0x01, 0x0b, 0x37, 0xce, 0xe6, 0x1d, 0xb2, 0x8a, 0x9f, 0xe3, 0x4b, 0x53, 0x0f, 0x60, 0xc9, 0x3e,
		0xe8, 0x92, 0x7d, 0x93, 0xaf, 0xad, 0x66, 0xa3, 0x14, 0x7a, 0x29, 0x78, 0x49, 0xa4, 0x16, 0xe3,
		0x4b, 0xd8, 0x39, 0x60, 0xe7, 0x40, 0xa3, 0xe6, 0xa1, 0x5e, 0xad, 0x43, 0x4a, 0x73, 0x82, 0xc4,
		0x5a, 0xea, 0x19, 0x5d, 0xd0, 0x68, 0xfd, 0xed, 0xeb, 0xa3, 0x61, 0xff, 0x6a, 0xd5, 0x4a, 0x13,
		0xe3, 0x50, 0x7c, 0xf9, 0x85, 0xa4, 0x88, 0x50, 0x05, 0xc5, 0xd8, 0x4c, 0x34, 0x43, 0x1e, 0x99,
		0x27, 0x88, 0x74, 0x3d, 0x3f, 0xdc, 0xaf, 0x18, 0xa4, 0x86, 0x68, 0xe4, 0x26, 0x6b, 0x86, 0x29,
		0xf5, 0xc3, 0x95, 0x22, 0x61, 0x4b, 0xa1, 0x58, 0x9c, 0x54, 0x18, 0x53, 0x32, 0x2e, 0x67, 0x10,
		0xd6, 0x14, 0x09, 0x6f, 0xda, 0x12, 0x6d, 0xb5, 0x72, 0x54, 0x3d, 0xaa, 0x1d, 0x56, 0x8e, 0x0e,
		0x72, 0x24, 0xe3, 0x8c, 0x12, 0xe2, 0xef, 0x72, 0x50, 0x78, 0xac, 0xdb, 0xd6, 0x87, 0xea, 0x6e,
		0x1b, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x80, 0x1a, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x75, 0xa0, 0xce,
		0x79, 0x6a, 0x75, 0x52, 0x44, 0x36, 0x0a, 0x51, 0xaa, 0x57, 0x71, 0xd5, 0x8e, 0xd1, 0xfe, 0xd6,
		0x6a, 0x36, 0xae, 0xbd, 0x47, 0x57, 0xa9, 0x78, 0x2b, 0x25, 0x56, 0x88, 0xbe, 0x11, 0x7d, 0x23,
		0xfa, 0x06, 0xa9, 0x87, 0xd4, 0x43, 0xea, 0x21, 0xf5, 0x90, 0x7a, 0x48, 0x3d, 0xd1, 0x37, 0x80,
		0x1a, 0xa0, 0x06, 0xa8, 0x01, 0x6a, 0x80, 0x1a, 0xa0, 0x26, 0xfa, 0xb6, 0xc6, 0xd1, 0x37, 0xb1,
		0x2a, 0x87, 0xa9, 0x83, 0x6f, 0x39, 0xaa, 0x78, 0x98, 0xdd, 0x01, 0xd4, 0xb4, 0x27, 0x32, 0x45,
		0x44, 0x6c, 0xe3, 0x14, 0x6a, 0xaa, 0xc4, 0x18, 0x95, 0x84, 0x98, 0xbc, 0x54, 0x48, 0xe3, 0xec,
		0xa9, 0xa6, 0xf1, 0xa8, 0xd7, 0x47, 0x4b, 0xdf, 0x33, 0x41, 0xa5, 0x37, 0x42, 0xd4, 0x03, 0x61,
		0x67, 0x67, 0xb8, 0x97, 0xb0, 0x9b, 0xdc, 0xc8, 0x45, 0xcf, 0x08, 0xd2, 0x45, 0xf1, 0x95, 0xa2,
		0xf7, 0xca, 0x47, 0xb0, 0x2b, 0x98, 0x41, 0xae, 0xcc, 0x20, 0xf5, 0x11, 0x6c, 0xa7, 0xf1, 0xe8,
		0xf9, 0xa5, 0x9e, 0x4e, 0x74, 0x3b, 0xea, 0x3b, 0x41, 0x13, 0x57, 0x93, 0x18, 0x95, 0xdd, 0x82,
		0x9a, 0xc4, 0xa8, 0x7e, 0x7d, 0x93, 0xee, 0xa3, 0x1b, 0x38, 0x0a, 0xb5, 0x83, 0x26, 0x7c, 0x5b,
		0x55, 0xe1, 0x9a, 0x53, 0xbf, 0xfb, 0xd8, 0x7b, 0xc8, 0xe7, 0x0c, 0x77, 0x67, 0x87, 0xe5, 0x5d,
		0x3b, 0x3a, 0xf9, 0x11, 0xc3, 0x2b, 0xc9, 0x90, 0xc0, 0x24, 0x35, 0x4c, 0x52, 0xbd, 0x09, 0x86,
		0x5f, 0xfa, 0x1c, 0xb4, 0x9c, 0x46, 0xdd, 0xe9, 0x84, 0xa5, 0xf6, 0xb7, 0xb0, 0x63, 0x92, 0x3c,
		0x38, 0x3d, 0x14, 0x81, 0x5d, 0x02, 0xbb, 0x1b, 0x15, 0xd8, 0x1d, 0xba, 0xe7, 0x5a, 0xd5, 0x20,
		0xb6, 0xfb, 0x86, 0xd8, 0x2e, 0xb1, 0xdd, 0x9c, 0xc6, 0x76, 0xf7, 0xde, 0x54, 0xab, 0xb5, 0xc3,
		0x6a, 0xb5, 0x7c, 0xb8, 0x7f, 0x58, 0x3e, 0x3a, 0x38, 0xd8, 0xab, 0xed, 0x11, 0xe5, 0x95, 0x8b,
		0xf2, 0xbe, 0x56, 0xc2, 0xe5, 0x86, 0xd7, 0xa9, 0x3b, 0x41, 0xc3, 0x0c, 0x91, 0xa3, 0x41, 0xc0,
		0x62, 0xb0, 0x18, 0x2c, 0x06, 0x8b, 0xc1, 0x62, 0xb0, 0x18, 0x2c, 0x56, 0xc5, 0x62, 0x37, 0x08,
		0x5a, 0x81, 0x19, 0x12, 0x0f, 0x87, 0x00, 0x87, 0xc1, 0x61, 0x70, 0x18, 0x1c, 0x06, 0x87, 0xc1,
		0x61, 0x70, 0x58, 0x15, 0x87, 0x1f, 0xbb, 0xcd, 0xd0, 0x93, 0x89, 0x55, 0x4f, 0x0d, 0x05, 0x2e,
		0x83, 0xcb, 0xe0, 0x32, 0xb8, 0x0c, 0x2e, 0x83, 0xcb, 0xe0, 0xb2, 0x2a, 0x2e, 0xb7, 0xea, 0xa1,
		0x6b, 0x88, 0xc7, 0xc3, 0x21, 0xc0, 0x61, 0x70, 0x18, 0x1c, 0x06, 0x87, 0xc1, 0x61, 0x70, 0x18,
		0x1c, 0x56, 0xc5, 0xe1, 0xae, 0x2f, 0xb4, 0x3a, 0x9e, 0x18, 0x08, 0x4c, 0x06, 0x93, 0xc1, 0x64,
		0x30, 0x19, 0x4c, 0x06, 0x93, 0xc1, 0x64, 0x75, 0x4c, 0xfe, 0xe6, 0xb7, 0xfe, 0xf6, 0x4b, 0xed,
		0xa0, 0x15, 0xb6, 0x4c, 0x51, 0x79, 0x62, 0x28, 0x70, 0x19, 0x5c, 0xde, 0x44, 0x5c, 0xa6, 0x76,
		0x06, 0xb8, 0xbc, 0x91, 0xb8, 0x4c, 0xed, 0x8c, 0xd5, 0xa2, 0x71, 0xb3, 0xb7, 0xa4, 0xad, 0x37,
		0x5d, 0x27, 0xd0, 0x87, 0xe1, 0xd8, 0x18, 0xe0, 0x2f, 0xf8, 0xbb, 0x51, 0xf8, 0xdb, 0x70, 0x42,
		0xb7, 0xe4, 0xf8, 0xa9, 0x4b, 0x8b, 0x2c, 0x52, 0xf1, 0x3d, 0x9d, 0xc5, 0xf1, 0xa5, 0x13, 0x86,
		0x6e, 0xe0, 0x6b, 0xc3, 0x70, 0xf1, 0xf6, 0xb6, 0xf1, 0xa3, 0xfa, 0x5c, 0xea, 0x7d, 0xa9, 0x8c,
		0xbe, 0x5c, 0x0f, 0xbe, 0xbc, 0x9d, 0xf8, 0xf2, 0xea, 0xf6, 0x76, 0xe7, 0xf6, 0xb6, 0xf1, 0x8f,
		0xed, 0x7f, 0xbe, 0xfa, 0xdf, 0x9f, 0x37, 0xb7, 0xb7, 0xff, 0xb8, 0xbd, 0x2d, 0xdd, 0x4d, 0x7c,
		0x62, 0xbb, 0xb8, 0x96, 0xfe, 0xad, 0xd5, 0x0d, 0xc5, 0xd2, 0x39, 0xe7, 0x8c, 0x85, 0xbf, 0xc3,
		0xdf, 0x11, 0x07, 0x24, 0x0e, 0xc8, 0x7a, 0x83, 0x38, 0x20, 0x2b, 0x0f, 0x65, 0x64, 0x36, 0x4f,
		0xe8, 0x9c, 0x18, 0x05, 0x34, 0x06, 0x8d, 0x41, 0x63, 0xd0, 0x18, 0x34, 0x06, 0x8d, 0x41, 0x63,
		0x65, 0x34, 0x36, 0x4d, 0xe9, 0x8c, 0x8d, 0x01, 0x12, 0x83, 0xc4, 0x20, 0x31, 0x48, 0x0c, 0x12,
		0x83, 0xc4, 0x20, 0xb1, 0x32, 0x12, 0x4b, 0x25, 0x75, 0xce, 0x19, 0x0b, 0x64, 0x06, 0x99, 0x41,
		0x66, 0x90, 0x19, 0x64, 0x06, 0x99, 0x41, 0x66, 0x65, 0x64, 0x36, 0x4d, 0xeb, 0x8c, 0x8d, 0x01,
		0x12, 0x83, 0xc4, 0x20, 0x31, 0x48, 0x0c, 0x12, 0x83, 0xc4, 0x20, 0xb1, 0x32, 0x12, 0xcb, 0x24,
		0x76, 0xce, 0x8c, 0x04, 0x2a, 0x83, 0xca, 0xa0, 0x32, 0xa8, 0x0c, 0x2a, 0x83, 0xca, 0xa0, 0xf2,
		0xda, 0xf7, 0x61, 0xed, 0x77, 0x08, 0xdc, 0x55, 0x6c, 0x22, 0x55, 0x30, 0xe9, 0x11, 0xda, 0xef,
		0xbe, 0x7a, 0x7f, 0x32, 0xba, 0x63, 0x86, 0x4d, 0xb6, 0x1a, 0x6e, 0xa7, 0x1e, 0x78, 0x6d, 0x25,
		0xf1, 0x8e, 0x13, 0x1d, 0x62, 0x17, 0xd3, 0xfd, 0x2e, 0x3b, 0x4e, 0x43, 0xf7, 0xbb, 0x7e, 0x1f,
		0xcf, 0xc0, 0xf3, 0xbf, 0xe8, 0x34, 0xbe, 0x7b, 0x93, 0xa1, 0x7d, 0xb9, 0xbe, 0xf3, 0xb9, 0xe9,
		0x36, 0xd4, 0x6d, 0x6b, 0x74, 0x61, 0xda, 0x96, 0x65, 0xee, 0x83, 0xd3, 0x6d, 0xf6, 0xe7, 0xb3,
		0xa7, 0x0e, 0x98, 0x23, 0xe6, 0x98, 0xad, 0x39, 0x7e, 0x6e, 0xb5, 0x9a, 0xae, 0xa3, 0xd5, 0x88,
		0x72, 0x2f, 0x43, 0x7b, 0xf4, 0x1e, 0x3c, 0xbf, 0xe1, 0x7e, 0x57, 0xb7, 0xc7, 0xd1, 0x85, 0x18,
		0x16, 0x86, 0x95, 0xa9, 0x61, 0x75, 0x3d, 0x3f, 0x54, 0x2a, 0xe5, 0xa0, 0x51, 0xc2, 0x41, 0x73,
		0xe1, 0xad, 0x11, 0x61, 0x30, 0x59, 0x68, 0x1b, 0xae, 0x02, 0x4d, 0x17, 0xd6, 0x12, 0x4b, 0x3c,
		0x8d, 0x85, 0xb4, 0xd1, 0x02, 0x5a, 0x4a, 0x64, 0xa6, 0x25, 0x17, 0x44, 0x64, 0x67, 0x69, 0xb9,
		0x7a, 0x97, 0x21, 0xfc, 0x0c, 0xca, 0x1e, 0x7c, 0x1d, 0x5a, 0x9b, 0x22, 0x04, 0xc5, 0x2f, 0x06,
		0x86, 0x80, 0xa1, 0x4c, 0x61, 0x28, 0xf4, 0x1e, 0xdd, 0xd0, 0xab, 0x7f, 0xeb, 0x80, 0x44, 0x20,
		0x11, 0x48, 0xb4, 0xf6, 0x48, 0xf4, 0x18, 0x76, 0xd5, 0x11, 0xa8, 0x77, 0x11, 0xc8, 0x03, 0xf2,
		0x64, 0xbe, 0x00, 0xda, 0xab, 0x69, 0xc0, 0x4e, 0x0d, 0xd8, 0x01, 0x76, 0x84, 0x44, 0x56, 0x3b,
		0x38, 0xd8, 0x07, 0x71, 0x8c, 0x10, 0x67, 0xb8, 0x2d, 0xa6, 0x08, 0x39, 0xfd, 0xab, 0xc0, 0x1c,
		0x30, 0x27, 0x53, 0xcc, 0x59, 0x8f, 0xcd, 0xa5, 0x56, 0xdb, 0x0d, 0x4a, 0x9d, 0xd0, 0x09, 0xbb,
		0x1d, 0x75, 0xc3, 0x8a, 0x5f, 0x8c, 0x7d, 0x61, 0x5f, 0x99, 0xda, 0x97, 0xeb, 0x77, 0x1f, 0xdd,
		0xc0, 0x51, 0x38, 0x39, 0x30, 0x61, 0x64, 0x55, 0x85, 0x6b, 0x4e, 0xfd, 0xee, 0x63, 0xef, 0x21,
		0x9f, 0x33, 0x34, 0xcc, 0x50, 0x45, 0x30, 0xe3, 0x10, 0x4b, 0xef, 0x2a, 0x4c, 0x11, 0x53, 0xcc,
		0xd4, 0x14, 0xbd, 0x86, 0xeb, 0x87, 0x5e, 0xf8, 0x14, 0xb8, 0x0f, 0x3a, 0xa6, 0xa8, 0x40, 0x8a,
		0x8b, 0x67, 0xc3, 0x5b, 0xfd, 0xe2, 0x74, 0x5c, 0x93, 0x0a, 0xfe, 0xc3, 0x63, 0x53, 0xa5, 0xbe,
		0xc1, 0x48, 0x0b, 0x7c, 0xcb, 0xec, 0x13, 0x09, 0x13, 0xa6, 0x7a, 0x9c, 0xcd, 0xf4, 0x18, 0x5b,
		0x8a, 0x29, 0x35, 0x3b, 0xb5, 0xb6, 0x5c, 0xfe, 0x8b, 0x65, 0xb5, 0x44, 0x4e, 0xc5, 0x4e, 0xf7,
		0xf3, 0xf8, 0x8d, 0x12, 0xc5, 0x34, 0x26, 0x6d, 0x13, 0x97, 0x25, 0xcc, 0xc3, 0x48, 0x7f, 0x13,
		0x3e, 0x96, 0xd6, 0x71, 0xaa, 0x38, 0x4c, 0x65, 0x47, 0xa9, 0xea, 0x20, 0xb5, 0x1d, 0xa3, 0xb6,
		0x43, 0xd4, 0x71, 0x84, 0x66, 0x76, 0xf4, 0xce, 0x0b, 0x52, 0x1a, 0x50, 0x4c, 0x2b, 0xd4, 0x31,
		0x79, 0xe2, 0x6a, 0x35, 0x6c, 0xde, 0x03, 0x9b, 0xc1, 0x66, 0x15, 0x55, 0x8d, 0x2e, 0xa8, 0x8f,
		0x34, 0x42, 0x13, 0x21, 0x87, 0xd7, 0xeb, 0xa5, 0x25, 0xed, 0x91, 0x96, 0x94, 0x81, 0x7a, 0x8b,
		0xa9, 0xb9, 0x84, 0xba, 0x6b, 0x46, 0x19, 0x15, 0xe7, 0x5b, 0xd5, 0x0c, 0xa2, 0x0b, 0x75, 0xce,
		0xa8, 0x2f, 0xd4, 0x18, 0xf5, 0x33, 0xeb, 0xd2, 0x21, 0x65, 0x5d, 0x83, 0x91, 0x30, 0x1c, 0x31,
		0x03, 0x92, 0x32, 0x24, 0x71, 0x83, 0x12, 0x37, 0x2c, 0x49, 0x03, 0xd3, 0x33, 0x34, 0x4d, 0x83,
		0xd3, 0x5f, 0x1b, 0xca, 0x85, 0x45, 0x0d, 0xc3, 0xa4, 0xe6, 0x72, 0xd3, 0xd9, 0x6f, 0x52, 0x3d,
		0xb3, 0xbf, 0x24, 0xca, 0xa5, 0x72, 0x86, 0x7f, 0xd6, 0x61, 0x6a, 0x9d, 0xe9, 0xc7, 0x5d, 0xe1,
		0xae, 0x70, 0x57, 0x9a, 0x39, 0x09, 0x0b, 0xfd, 0xd5, 0x5e, 0x8e, 0xfd, 0x95, 0x5a, 0x46, 0xc3,
		0x92, 0xb8, 0x5a, 0xfa, 0xfc, 0x86, 0x65, 0xbe, 0xaa, 0x8c, 0xa3, 0xc2, 0x51, 0xe1, 0xa8, 0x54,
		0xb4, 0x45, 0x39, 0xc7, 0x63, 0x91, 0xed, 0x1c, 0x1a, 0x0c, 0x61, 0x56, 0x7c, 0x61, 0xf4, 0xcf,
		0x4c, 0x5d, 0x0b, 0x52, 0xc5, 0x18, 0x84, 0x9c, 0xca, 0xcc, 0x70, 0x42, 0xc5, 0x19, 0xa2, 0xf1,
		0x04, 0xcb, 0x06, 0x18, 0xaa, 0xf3, 0xe4, 0x14, 0x08, 0x14, 0x6d, 0xb0, 0x3d, 0x05, 0x52, 0x6d,
		0x40, 0xad, 0xce, 0xc5, 0xd6, 0x6a, 0xae, 0xbe, 0xcb, 0x31, 0x5d, 0x51, 0x3a, 0x07, 0xb6, 0xd0,
		0x65, 0x2a, 0x9c, 0x0b, 0x83, 0x68, 0x40, 0x34, 0x20, 0x1a, 0xeb, 0x1a, 0xc0, 0xb1, 0x1a, 0x93,
		0xd6, 0x2c, 0x2e, 0x13, 0x5d, 0x6f, 0xb0, 0x3b, 0x1f, 0xdf, 0xac, 0x9e, 0xf8, 0x69, 0x57, 0x6b,
		0xfb, 0xa6, 0x60, 0xb4, 0x93, 0x1f, 0x7f, 0x98, 0x89, 0x9f, 0xee, 0x87, 0xce, 0x2e, 0x07, 0x05,
		0xfc, 0xf4, 0x96, 0xb9, 0x46, 0xcb, 0x5b, 0x4a, 0xf5, 0xad, 0x02, 0x01, 0x28, 0xd5, 0xa7, 0x30,
		0xdb, 0x4d, 0xd7, 0x79, 0x50, 0x3b, 0xba, 0x35, 0xe3, 0xca, 0x0f, 0xf5, 0xda, 0x4c, 0xf7, 0x5d,
		0xde, 0xce, 0xce, 0xd0, 0x5d, 0xed, 0x0e, 0xec, 0x2b, 0x07, 0x7e, 0x62, 0x70, 0xee, 0x49, 0xdb,
		0x4f, 0xa4, 0x3d, 0x36, 0x35, 0x57, 0x94, 0xba, 0x7e, 0xa2, 0x82, 0x9f, 0xc0, 0x4f, 0x2c, 0x0b,
		0xaf, 0xea, 0xee, 0x9d, 0x3b, 0x8d, 0x47, 0xcf, 0x57, 0xcd, 0x11, 0x58, 0xa8, 0x32, 0x13, 0xa3,
		0xb1, 0xf8, 0x62, 0xf1, 0xc5, 0xe2, 0x4b, 0x41, 0x5b, 0xf4, 0x92, 0x1e, 0x16, 0x62, 0x4d, 0xd5,
		0x60, 0x0c, 0xb5, 0xa4, 0x88, 0xd5, 0xc4, 0x89, 0xa2, 0x02, 0x9c, 0xc6, 0x6e, 0x4b, 0xa3, 0x94,
		0xa7, 0x00, 0xba, 0xe3, 0xb2, 0x70, 0x59, 0xab, 0x71, 0x59, 0xba, 0x6c, 0x21, 0xb6, 0xd4, 0x2e,
		0x7d, 0x0e, 0x5a, 0x4e, 0x43, 0xbf, 0x58, 0xfe, 0x92, 0x65, 0xf8, 0xf4, 0xd0, 0xaf, 0x73, 0x51,
		0x1a, 0xda, 0xd4, 0x48, 0x25, 0x8d, 0x55, 0xdc, 0x68, 0xa5, 0x8d, 0xd7, 0x9a, 0x11, 0x5b, 0x33,
		0x66, 0x1b, 0x46, 0x6d, 0x66, 0xdc, 0x86, 0x46, 0x2e, 0xc7, 0x4f, 0x16, 0xc1, 0xa5, 0x56, 0xf5,
		0xff, 0x45, 0xe6, 0xf9, 0x46, 0x60, 0x28, 0x99, 0x0d, 0xea, 0xd1, 0x3f, 0x19, 0x0b, 0x28, 0x48,
		0x6f, 0x58, 0x0b, 0xfb, 0xb5, 0x99, 0x61, 0x85, 0x37, 0xb0, 0xa3, 0x71, 0x2d, 0x6c, 0x9e, 0x0a,
		0x59, 0xc8, 0xe4, 0x54, 0x09, 0x6e, 0x6c, 0x67, 0x35, 0x55, 0xf2, 0xdd, 0x0a, 0x32, 0x9d, 0xbd,
		0xad, 0x7c, 0x8c, 0x72, 0xb7, 0xa2, 0xad, 0x78, 0x93, 0xde, 0x19, 0x9e, 0x5f, 0x6a, 0x78, 0x9d,
		0xba, 0x13, 0x34, 0x64, 0x19, 0x58, 0x34, 0x28, 0xdc, 0x0b, 0xee, 0x05, 0xf7, 0x82, 0x7b, 0xc1,
		0xbd, 0xe0, 0x5e, 0x70, 0x2f, 0xb8, 0x17, 0xdc, 0x2b, 0xce, 0xbd, 0xdc, 0x20, 0x68, 0x05, 0xb2,
		0xcc, 0x6b, 0x38, 0x24, 0xbc, 0x0b, 0xde, 0x05, 0xef, 0x82, 0x77, 0xc1, 0xbb, 0xe0, 0x5d, 0xf0,
		0x2e, 0x78, 0x17, 0xbc, 0x2b, 0xce, 0xbb, 0x1e, 0xbb, 0xcd, 0xd0, 0xb3, 0xb3, 0xf7, 0x38, 0x35,
		0x34, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0x83, 0x87, 0xc1, 0xc3, 0xe0, 0x61, 0xf0, 0x30, 0x78, 0x18,
		0x3c, 0x2c, 0xce, 0xc3, 0x5a, 0xf5, 0xd0, 0x15, 0xe6, 0x5f, 0xc3, 0x21, 0xe1, 0x5d, 0xf0, 0x2e,
		0x78, 0x17, 0xbc, 0x0b, 0xde, 0x05, 0xef, 0x82, 0x77, 0xc1, 0xbb, 0xe0, 0x5d, 0x71, 0xde, 0xd5,
		0xf5, 0x2d, 0x45, 0xbf, 0x26, 0x06, 0x86, 0x83, 0xc1, 0xc1, 0xe0, 0x60, 0x70, 0x30, 0x38, 0x18,
		0x1c, 0x0c, 0x0e, 0x06, 0x07, 0x83, 0x83, 0x4d, 0x72, 0xb0, 0x6f, 0x7e, 0xeb, 0x6f, 0xbf, 0xd4,
		0x0e, 0x5a, 0x61, 0x4b, 0x9a, 0x85, 0x4d, 0x0c, 0x0d, 0x0f, 0x83, 0x87, 0xc1, 0xc3, 0xf2, 0xc7,
		0xc3, 0x8c, 0x0a, 0xf2, 0x4e, 0x9b, 0xe7, 0x21, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0xd3, 0x9a, 0x2a,
		0xe9, 0x42, 0xbf, 0xb0, 0xaf, 0x7c, 0xb3, 0xaf, 0xa6, 0xd3, 0x09, 0x4b, 0xf5, 0xa6, 0xeb, 0x04,
		0x72, 0xb4, 0x2b, 0x36, 0x26, 0x7c, 0x0b, 0xbe, 0x05, 0xdf, 0xca, 0x11, 0xdf, 0x6a, 0x38, 0xa1,
		0x5b, 0x72, 0xfc, 0x46, 0x29, 0xf4, 0xb4, 0x6b, 0x7a, 0xcf, 0x33, 0xd1, 0x3d, 0x89, 0xe0, 0xd7,
		0xa5, 0x13, 0x86, 0x6e, 0xe0, 0x8b, 0xd1, 0xae, 0xe2, 0xed, 0x6d, 0xe3, 0x47, 0xf5, 0xb9, 0xd4,
		0xfb, 0x52, 0x19, 0x7d, 0xb9, 0x1e, 0x7c, 0x79, 0x3b, 0xf1, 0xe5, 0xd5, 0xed, 0xed, 0xce, 0xed,
		0x6d, 0xe3, 0x1f, 0xdb, 0xff, 0x7c, 0xf5, 0xbf, 0x3f, 0x6f, 0x6e, 0x6f, 0xff, 0x71, 0x7b, 0x5b,
		0xba, 0x9b, 0xf8, 0xc4, 0x76, 0xf1, 0x45, 0xe2, 0x43, 0xab, 0x1b, 0x5a, 0x2b, 0x4f, 0x34, 0x67,
		0x6c, 0xf0, 0x02, 0xbc, 0x00, 0x2f, 0xf2, 0xb7, 0x3e, 0x67, 0x9f, 0x84, 0xf5, 0x39, 0xeb, 0xf3,
		0x1c, 0x4c, 0x15, 0xfb, 0x24, 0x2f, 0x75, 0xa5, 0xde, 0x63, 0x4b, 0xf2, 0x05, 0x8a, 0x26, 0x46,
		0x85, 0x7d, 0xc1, 0xbe, 0x60, 0x5f, 0xb0, 0x2f, 0xd8, 0x17, 0xec, 0x0b, 0xf6, 0x05, 0xfb, 0x82,
		0x7d, 0x4d, 0xb0, 0x2f, 0xe9, 0x12, 0x45, 0xb1, 0x31, 0x61, 0x5e, 0x30, 0x2f, 0x98, 0x17, 0xcc,
		0x0b, 0xe6, 0x05, 0xf3, 0x82, 0x79, 0xc1, 0xbc, 0x60, 0x5e, 0x13, 0xcc, 0xcb, 0x56, 0x91, 0xa2,
		0x39, 0x63, 0xc3, 0xc4, 0x60, 0x62, 0x30, 0x31, 0x98, 0x18, 0x4c, 0x0c, 0x26, 0x06, 0x13, 0x83,
		0x89, 0xc1, 0xc4, 0x26, 0x98, 0x98, 0x74, 0x99, 0xa2, 0xd8, 0x98, 0x30, 0x2f, 0x98, 0x17, 0xcc,
		0x0b, 0xe6, 0x05, 0xf3, 0x82, 0x79, 0xc1, 0xbc, 0x60, 0x5e, 0x30, 0xaf, 0x09, 0xe6, 0x65, 0xa7,
		0x50, 0xd1, 0xcc, 0xc8, 0xb0, 0x30, 0x58, 0x18, 0x2c, 0x0c, 0x16, 0x06, 0x0b, 0x83, 0x85, 0xc1,
		0xc2, 0x60, 0x61, 0x9b, 0xc6, 0xc2, 0xb6, 0x32, 0xd4, 0xf9, 0xe2, 0xb1, 0xef, 0xb7, 0x42, 0xa7,
		0x37, 0x95, 0x46, 0x6a, 0x5e, 0xec, 0xd4, 0xbf, 0xba, 0x8f, 0x4e, 0xdb, 0x09, 0xbf, 0xf6, 0x10,
		0x61, 0xb7, 0xd5, 0x76, 0xfd, 0x7a, 0x9f, 0x21, 0x95, 0xbc, 0x1e, 0x36, 0x3c, 0x38, 0x75, 0xb7,
		0xb3, 0x3b, 0xef, 0xdb, 0xdd, 0x4e, 0xf7, 0x73, 0xec, 0xf7, 0xf1, 0x9f, 0x76, 0x3b, 0xa1, 0x13,
		0xba, 0xbb, 0x43, 0x78, 0x31, 0x21, 0x7e, 0xc5, 0x4e, 0x18, 0x74, 0xeb, 0xa1, 0x3f, 0x04, 0xac,
		0x8b, 0xe8, 0xe9, 0xce, 0xa2, 0x3b, 0xdf, 0xcf, 0xfb, 0xf6, 0xfe, 0x53, 0xfc, 0xe1, 0x26, 0x7e,
		0xba, 0xff, 0xd4, 0x7b, 0xb8, 0xfb, 0x93, 0xd1, 0xc3, 0x6d, 0x65, 0x33, 0xd7, 0x1a, 0xf3, 0x5c,
		0x6c, 0xb8, 0x9d, 0x7a, 0xe0, 0xb5, 0x8d, 0x26, 0x79, 0x9c, 0x9e, 0x1d, 0x1b, 0x4c, 0x53, 0xe7,
		0xcc, 0xdc, 0x9f, 0x31, 0xf3, 0x96, 0x60, 0xdc, 0x62, 0x4c, 0x5b, 0x8a, 0x61, 0x8b, 0x33, 0x6b,
		0x71, 0x46, 0x2d, 0xc9, 0xa4, 0xb3, 0xf5, 0x91, 0xc6, 0x8c, 0x39, 0xd2, 0x96, 0x4e, 0x18, 0x78,
		0xfe, 0x17, 0x13, 0x75, 0x89, 0x8a, 0x19, 0xe4, 0xd8, 0xdf, 0xb8, 0xbe, 0xf3, 0xb9, 0xe9, 0x36,
		0xcc, 0x7d, 0xcd, 0x68, 0x20, 0xcd, 0x79, 0x7b, 0xe7, 0x3e, 0x38, 0xdd, 0x66, 0x5f, 0xdf, 0x7a,
		0xea, 0x8b, 0xbb, 0xc2, 0x5d, 0xe1, 0xae, 0x54, 0xb4, 0xe5, 0x73, 0xab, 0xd5, 0x74, 0x1d, 0x5f,
		0xc2, 0x5f, 0xed, 0xe5, 0xd8, 0x5f, 0x79, 0x0f, 0x9e, 0xdf, 0x70, 0xbf, 0x9b, 0xfb, 0xab, 0xd1,
		0x40, 0x38, 0x1a, 0x1c, 0x0d, 0x8e, 0x46, 0x41, 0x5b, 0xba, 0x9e, 0x1f, 0x1a, 0x15, 0xd8, 0x14,
		0x28, 0xac, 0x29, 0x14, 0x2e, 0x14, 0x88, 0xab, 0x4a, 0x86, 0x07, 0x85, 0x63, 0x4d, 0xd2, 0xe1,
		0x40, 0x1b, 0x81, 0x24, 0x81, 0xf0, 0x9f, 0x68, 0xd8, 0xcf, 0xd6, 0x14, 0x48, 0x17, 0xc2, 0xb4,
		0x32, 0x17, 0x2b, 0x0a, 0xa2, 0xdd, 0xe5, 0x99, 0x6e, 0x08, 0x91, 0x0d, 0x13, 0xaa, 0x11, 0x5b,
		0x1a, 0x95, 0xa1, 0x2b, 0xd0, 0x15, 0xe8, 0x0a, 0x74, 0x05, 0xba, 0x02, 0x5d, 0x81, 0xae, 0x40,
		0x57, 0xa6, 0xc4, 0x3c, 0xa8, 0x95, 0xfd, 0x75, 0xe8, 0x6d, 0x0c, 0x49, 0x4b, 0x7c, 0x30, 0x68,
		0x07, 0xb4, 0x03, 0xda, 0xa1, 0xa0, 0x2d, 0xa1, 0xf7, 0xe8, 0x86, 0x5e, 0xfd, 0x5b, 0x07, 0xe6,
		0x01, 0xf3, 0x80, 0x79, 0xc0, 0x3c, 0x36, 0x9c, 0x79, 0x0c, 0x8f, 0xeb, 0x18, 0x52, 0x8e, 0xfe,
		0x28, 0x70, 0x0d, 0xb8, 0x06, 0x5c, 0x43, 0x41, 0x5b, 0x5e, 0xc6, 0x49, 0x95, 0x56, 0xdb, 0x0d,
		0x4a, 0x9d, 0xd0, 0x09, 0xbb, 0x1d, 0x73, 0x47, 0x13, 0x1f, 0x0c, 0x7f, 0x83, 0xbf, 0xc1, 0xdf,
		0x28, 0x68, 0x8b, 0xeb, 0x77, 0x1f, 0xdd, 0xc0, 0x31, 0x38, 0x56, 0x3a, 0xe1, 0x74, 0xaa, 0x06,
		0x63, 0x9c, 0xfa, 0xdd, 0xc7, 0xde, 0x4b, 0x3d, 0x67, 0xe5, 0xb8, 0xb6, 0x2c, 0x4e, 0x95, 0xe9,
		0x01, 0x6f, 0x8b, 0x07, 0xbb, 0x35, 0xe6, 0xd9, 0xda, 0x39, 0x6e, 0x35, 0x83, 0x4b, 0x3f, 0x63,
		0xe9, 0x3e, 0x99, 0x72, 0x4e, 0x7b, 0x9e, 0x4c, 0x75, 0xe7, 0xaf, 0x78, 0xee, 0x75, 0xc2, 0xe3,
		0x30, 0x54, 0x6b, 0x9e, 0xd7, 0x5b, 0x59, 0x9f, 0x36, 0xdd, 0x9e, 0x4f, 0xea, 0x01, 0xa3, 0xdf,
		0x6d, 0x36, 0x5f, 0x6f, 0xa9, 0xac, 0x09, 0xf5, 0x2f, 0xbe, 0x08, 0x1a, 0x6e, 0xe0, 0x36, 0x7e,
		0x79, 0x1a, 0x5e, 0x2a, 0x2a, 0x40, 0x4d, 0x63, 0xb0, 0x62, 0x04, 0x0a, 0xea, 0x6f, 0x41, 0xed,
		0xd3, 0x29, 0x7c, 0xb2, 0xfa, 0x2e, 0xff, 0x44, 0xc2, 0xbc, 0xa8, 0xce, 0x87, 0xd4, 0x3c, 0xa4,
		0x10, 0xbd, 0x8c, 0xc8, 0x97, 0x4b, 0x79, 0xb1, 0xec, 0xe6, 0xff, 0x65, 0x81, 0x34, 0x47, 0x6e,
		0x61, 0xc9, 0x42, 0x37, 0x9d, 0x17, 0x50, 0xb2, 0x7a, 0x25, 0x2b, 0x4f, 0x67, 0xd5, 0x8b, 0xde,
		0x2f, 0xa5, 0x96, 0xe8, 0x6b, 0xc7, 0x12, 0x7d, 0xd0, 0xd5, 0x83, 0xf9, 0x33, 0x3f, 0x3b, 0xaf,
		0x93, 0xbf, 0x99, 0x92, 0x40, 0xd2, 0x9b, 0xab, 0xbe, 0xf1, 0x9c, 0xf7, 0x54, 0x7b, 0xbf, 0xc9,
		0xb7, 0x1a, 0x3f, 0xfb, 0xe0, 0xbb, 0xe1, 0xd3, 0x2f, 0x7a, 0xea, 0xa2, 0xd7, 0xf9, 0xd5, 0xf9,
		0xe6, 0x5e, 0xb5, 0x5a, 0xb3, 0xb4, 0x79, 0xfa, 0x4d, 0x8a, 0xf1, 0x3f, 0x4d, 0x3c, 0xe1, 0x3b,
		0xf7, 0x2f, 0x6f, 0x24, 0xde, 0xe7, 0xad, 0xe7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x85, 0x46, 0x6e, 0x5c, 0xc3, 0x1d, 0x06, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_FORWARDING_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_LOG_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_FORWARDING_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_LOG_ACTION)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_ETHERTYPE)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_ETHERTYPE)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_TCP_FLAGS)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort)(0)),
	},
	"/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/tcp-flags": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_TCP_FLAGS)(0)),
	},
	"/acl/acl-sets/acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/acl-sets/acl-set/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/acl-sets/acl-set/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/egress-acl-sets/egress-acl-set/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_TYPE)(0)),
	},
	"/acl/state/counter-capability": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAcl_ACL_COUNTER_CAPABILITY)(0)),
	},
	"/interfaces/interface/config/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
	"/interfaces/interface/state/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
}

